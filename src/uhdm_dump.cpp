/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019-2020 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   vpi_visitor.cpp
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#include <string.h>

#include <iostream>
#include <map>
#include <set>
#include <sstream>
#include <string>
#include <vector>

#include "include/sv_vpi_user.h"
#include "include/vhpi_user.h"

#include "headers/uhdm_types.h"
#include "headers/containers.h"
#include "headers/vpi_uhdm.h"
#include "headers/uhdm.h"
#include "headers/Serializer.h"

namespace UHDM {

static std::string visit_value(s_vpi_value* value) {
    if (value == nullptr) return "";
    switch (value->format) {
    case vpiIntVal: {
        return std::string(std::string("|INT:") + std::to_string(value->value.integer) + "\n");
        break;
    }
    case vpiStringVal: {
        const char* s = (const char*)value->value.str;
        return std::string(std::string("|STRING:") + std::string(s) + "\n");
        break;
    }
    case vpiBinStrVal: {
        const char* s = (const char*)value->value.str;
        return std::string(std::string("|BIN:") + std::string(s) + "\n");
        break;
    }
    case vpiHexStrVal: {
        const char* s = (const char*)value->value.str;
        return std::string(std::string("|HEX:") + std::string(s) + "\n");
        break;
    }
    case vpiOctStrVal: {
        const char* s = (const char*)value->value.str;
        return std::string(std::string("|OCT:") + std::string(s) + "\n");
        break;
    }
    case vpiRealVal: {
        return std::string(std::string("|REAL:") + std::to_string(value->value.real) + "\n");
        break;
    }
    case vpiScalarVal: {
        return std::string(std::string("|SCAL:") + std::to_string(value->value.scalar) + "\n");
        break;
    }
    default: break;
    }
    return "";
}

static std::string visit_delays(s_vpi_delay* delay) {
    if (delay == nullptr) return "";
    switch (delay->time_type) {
    case vpiScaledRealTime: {
        return std::string(std::string("|#") + std::to_string(delay->da[0].low) + "\n");
        break;
    }
    default: break;
    }
    return "";
}

static std::ostream& stream_indent(std::ostream& out, int indent) { return out; }

static void visit_object(vpiHandle obj_h, int indent, const char* relation,
                         std::set<const BaseClass*>* visited, std::ostream& out,
                         std::ostream& fout) {
    static constexpr int kLevelIndent = 2;

    unsigned int subobject_indent = indent + kLevelIndent;
    const uhdm_handle* const handle = (const uhdm_handle*)obj_h;
    const BaseClass* const object = (const BaseClass*)handle->object;
    const unsigned int objectType = vpi_get(vpiType, obj_h);
    const bool alreadyVisited = visited->find(object) != visited->end();
    visited->insert(object);

    std::string fileName;
    unsigned int line;
    {
        std::string hspaces;
        std::string rspaces;
        if (indent >= kLevelIndent) {
            for (int i = 0; i < indent - 2; i++) { hspaces += " "; }
            rspaces = hspaces + "|";
            hspaces += "\\_";
        }

        if (strlen(relation) != 0) { out << rspaces << relation << ":\n"; }
        out << hspaces << UHDM::VpiTypeName(obj_h) << ": ";
        bool needs_separator = false;
        if (const char* s = vpi_get_str(vpiDefName, obj_h)) {  // defName
            out << s;
            needs_separator = true;
        }
        if (const char* s = vpi_get_str(vpiName, obj_h)) {  // objectName
            if (needs_separator) out << " ";
            out << "(" << s << ")";  // objectName
        }
        out << ", id:" << object->UhdmId();
        if (const char* s = vpi_get_str(vpiFile, obj_h)) {
            out << ", file:" << s;  // fileName
            fileName = s;
        }
        if (unsigned int l = vpi_get(vpiLineNo, obj_h)) {
            out << ", line:" << l;
            line = l;
        }
        if (vpiHandle par = vpi_handle(vpiParent, obj_h)) {
            if (const char* parentName = vpi_get_str(vpiName, par)) {
                out << ", parent:" << parentName;
            }
            vpi_free_object(par);
        }
        out << "\n";
    }

    if (alreadyVisited) { return; }

    if (fileName != "")
        fout << fileName << ":" << line << ":" << UHDM::VpiTypeName(obj_h) << std::endl;

    if (strcmp(relation, "vpiParent") == 0) { return; }
    if (objectType == vpiClassObj) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiSimpleExpr) {
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiAssertion) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const int n = vpi_get(vpiStartLine, obj_h))
            stream_indent(out, indent) << "|vpiStartLine:" << n << "\n";
        if (const int n = vpi_get(vpiColumn, obj_h))
            stream_indent(out, indent) << "|vpiColumn:" << n << "\n";
        if (const int n = vpi_get(vpiEndLine, obj_h))
            stream_indent(out, indent) << "|vpiEndLine:" << n << "\n";
        if (const int n = vpi_get(vpiEndColumn, obj_h))
            stream_indent(out, indent) << "|vpiEndColumn:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiClockingBlock, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiClockingBlock", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiImmediateAssert) {
        if (const int n = vpi_get(vpiIsDeferred, obj_h))
            stream_indent(out, indent) << "|vpiIsDeferred:" << n << "\n";
        if (const int n = vpi_get(vpiIsFinal, obj_h))
            stream_indent(out, indent) << "|vpiIsFinal:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const int n = vpi_get(vpiStartLine, obj_h))
            stream_indent(out, indent) << "|vpiStartLine:" << n << "\n";
        if (const int n = vpi_get(vpiColumn, obj_h))
            stream_indent(out, indent) << "|vpiColumn:" << n << "\n";
        if (const int n = vpi_get(vpiEndLine, obj_h))
            stream_indent(out, indent) << "|vpiEndLine:" << n << "\n";
        if (const int n = vpi_get(vpiEndColumn, obj_h))
            stream_indent(out, indent) << "|vpiEndColumn:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiElseStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiElseStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiClockingBlock, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiClockingBlock", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiInterface) {
        if (const int n = vpi_get(vpiIndex, obj_h))
            stream_indent(out, indent) << "|vpiIndex:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDefName, obj_h))
            stream_indent(out, indent) << "|vpiDefName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiDefFile, obj_h))
            stream_indent(out, indent) << "|vpiDefFile:" << s << "\n";
        if (const char* s = vpi_get_str(vpiLibrary, obj_h))
            stream_indent(out, indent) << "|vpiLibrary:" << s << "\n";
        if (const char* s = vpi_get_str(vpiCell, obj_h))
            stream_indent(out, indent) << "|vpiCell:" << s << "\n";
        if (const char* s = vpi_get_str(vpiConfig, obj_h))
            stream_indent(out, indent) << "|vpiConfig:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiCellInstance, obj_h))
            stream_indent(out, indent) << "|vpiCellInstance:" << n << "\n";
        if (const int n = vpi_get(vpiDefNetType, obj_h))
            stream_indent(out, indent) << "|vpiDefNetType:" << n << "\n";
        if (const int n = vpi_get(vpiDefDelayMode, obj_h))
            stream_indent(out, indent) << "|vpiDefDelayMode:" << n << "\n";
        if (const int n = vpi_get(vpiProtected, obj_h))
            stream_indent(out, indent) << "|vpiProtected:" << n << "\n";
        if (const int n = vpi_get(vpiTimePrecision, obj_h))
            stream_indent(out, indent) << "|vpiTimePrecision:" << n << "\n";
        if (const int n = vpi_get(vpiTimeUnit, obj_h))
            stream_indent(out, indent) << "|vpiTimeUnit:" << n << "\n";
        if (const int n = vpi_get(vpiUnconnDrive, obj_h))
            stream_indent(out, indent) << "|vpiUnconnDrive:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiTop, obj_h))
            stream_indent(out, indent) << "|vpiTop:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiInstanceArray, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstanceArray", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiProcess, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiProcess", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInterfaceTfDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInterfaceTfDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiModport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiModport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiGlobalClocking, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiGlobalClocking", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiDefaultClocking, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiDefaultClocking", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiModPath, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiModPath", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInterface, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInterface", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInterfaceArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInterfaceArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPort, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPort", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiGenScopeArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiGenScopeArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiDefaultDisableIff, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiDefaultDisableIff", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTaskFunc, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTaskFunc", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNet, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNet", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiArrayNet, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiArrayNet", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAssertion, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAssertion", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiClassDefn, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiClassDefn", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiProgram, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiProgram", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiProgramArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiProgramArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSpecParam, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSpecParam", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiParameter) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiConstType, obj_h))
            stream_indent(out, indent) << "|vpiConstType:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiLocalParam, obj_h))
            stream_indent(out, indent) << "|vpiLocalParam:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiTchkTerm) {
        if (const int n = vpi_get(vpiEdge, obj_h))
            stream_indent(out, indent) << "|vpiEdge:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiCondition, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiCondition", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiPrimitive) {
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiClockedProp) {

        vpiHandle itr;
        itr = vpi_handle(vpiClockingEvent, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiClockingEvent", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiPropertyExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPropertyExpr", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiEnumConst) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        return;
    }
    if (objectType == vpiLogicNet) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const int n = vpi_get(vpiExpanded, obj_h))
            stream_indent(out, indent) << "|vpiExpanded:" << n << "\n";
        if (const int n = vpi_get(vpiImplicitDecl, obj_h))
            stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
        if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
            stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
        if (const int n = vpi_get(vpiNetType, obj_h))
            stream_indent(out, indent) << "|vpiNetType:" << n << "\n";
        if (const int n = vpi_get(vpiResolvedNetType, obj_h))
            stream_indent(out, indent) << "|vpiResolvedNetType:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitScalared, obj_h))
            stream_indent(out, indent) << "|vpiExplicitScalared:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiStrength0, obj_h))
            stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
        if (const int n = vpi_get(vpiStrength1, obj_h))
            stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
        if (const int n = vpi_get(vpiChargeStrength, obj_h))
            stream_indent(out, indent) << "|vpiChargeStrength:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitVectored, obj_h))
            stream_indent(out, indent) << "|vpiExplicitVectored:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiBit, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiBit", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiSimNet, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiSimNet", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPathTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPathTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTchkTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTchkTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiAttribute) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiDefFile, obj_h))
            stream_indent(out, indent) << "|vpiDefFile:" << s << "\n";
        if (const int n = vpi_get(vpiDefAttribute, obj_h))
            stream_indent(out, indent) << "|vpiDefAttribute:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }
        if (const int n = vpi_get(vpiDefLineNo, obj_h))
            stream_indent(out, indent) << "|vpiDefLineNo:" << n << "\n";

        return;
    }
    if (objectType == vpiPort) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiExplicitName, obj_h))
            stream_indent(out, indent) << "|vpiExplicitName:" << s << "\n";
        if (const int n = vpi_get(vpiPortIndex, obj_h))
            stream_indent(out, indent) << "|vpiPortIndex:" << n << "\n";
        if (const int n = vpi_get(vpiPortType, obj_h))
            stream_indent(out, indent) << "|vpiPortType:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const int n = vpi_get(vpiConnByName, obj_h))
            stream_indent(out, indent) << "|vpiConnByName:" << n << "\n";
        if (const int n = vpi_get(vpiDirection, obj_h))
            stream_indent(out, indent) << "|vpiDirection:" << n << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiBit, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiBit", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypedef, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedef", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiHighConn, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiHighConn", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLowConn, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLowConn", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiTaskCall) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiTask, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTask", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiArgument, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiArgument", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiProgramArray) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInstance, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInstance", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiModule, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiModule", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiReg) {

        vpiHandle itr;
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiIndex, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiIndex", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiChandleVar) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiReturn) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiCondition, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiCondition", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiSwitchArray) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiDelay, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiDelay", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimitive, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimitive", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInstance, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInstance", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiModule, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiModule", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiContAssign) {
        if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
            stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
        if (const int n = vpi_get(vpiStrength0, obj_h))
            stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
        if (const int n = vpi_get(vpiStrength1, obj_h))
            stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiDelay, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiDelay", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRhs, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRhs", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLhs, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLhs", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiBit, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiBit", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiWhile) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiCondition, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiCondition", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiPropertyTypespec) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiStructTypespec) {
        if (const int n = vpi_get(vpiPacked, obj_h))
            stream_indent(out, indent) << "|vpiPacked:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiTypespecMember, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypespecMember", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiEnumTypespec) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiBaseTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiBaseTypespec", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiEnumConst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiEnumConst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiFork) {
        if (const int n = vpi_get(vpiJoinType, obj_h))
            stream_indent(out, indent) << "|vpiJoinType:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiStmt, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiStmt", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiRepeat) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiCondition, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiCondition", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiAssert) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const int n = vpi_get(vpiStartLine, obj_h))
            stream_indent(out, indent) << "|vpiStartLine:" << n << "\n";
        if (const int n = vpi_get(vpiColumn, obj_h))
            stream_indent(out, indent) << "|vpiColumn:" << n << "\n";
        if (const int n = vpi_get(vpiEndLine, obj_h))
            stream_indent(out, indent) << "|vpiEndLine:" << n << "\n";
        if (const int n = vpi_get(vpiEndColumn, obj_h))
            stream_indent(out, indent) << "|vpiEndColumn:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiIsClockInferred, obj_h))
            stream_indent(out, indent) << "|vpiIsClockInferred:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiClockingBlock, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiClockingBlock", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiElseStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiElseStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiClockingEvent, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiClockingEvent", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiProperty, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiProperty", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiDesign) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        if (indent == 0) visited->clear();
        itr = vpi_iterate(uhdmallPackages, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "uhdmallPackages", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        if (indent == 0) visited->clear();
        itr = vpi_iterate(uhdmallClasses, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "uhdmallClasses", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        if (indent == 0) visited->clear();
        itr = vpi_iterate(uhdmallInterfaces, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "uhdmallInterfaces", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        if (indent == 0) visited->clear();
        itr = vpi_iterate(uhdmallUdps, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "uhdmallUdps", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        if (indent == 0) visited->clear();
        itr = vpi_iterate(uhdmallPrograms, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "uhdmallPrograms", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        if (indent == 0) visited->clear();
        itr = vpi_iterate(uhdmallModules, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "uhdmallModules", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        if (indent == 0) visited->clear();
        itr = vpi_iterate(uhdmtopModules, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "uhdmtopModules", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiLogicTypespec) {
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiIndexTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiIndexTypespec", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiElemTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiElemTypespec", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiPropertyInst) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const int n = vpi_get(vpiStartLine, obj_h))
            stream_indent(out, indent) << "|vpiStartLine:" << n << "\n";
        if (const int n = vpi_get(vpiColumn, obj_h))
            stream_indent(out, indent) << "|vpiColumn:" << n << "\n";
        if (const int n = vpi_get(vpiEndLine, obj_h))
            stream_indent(out, indent) << "|vpiEndLine:" << n << "\n";
        if (const int n = vpi_get(vpiEndColumn, obj_h))
            stream_indent(out, indent) << "|vpiEndColumn:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiPropertyDecl, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPropertyDecl", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiDisableCondition, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiDisableCondition", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiArgument, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiArgument", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiClockingBlock, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiClockingBlock", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiGenVar) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiGenScopeArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiGenScopeArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiBitTypespec) {
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiIndexTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiIndexTypespec", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiElemTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiElemTypespec", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiPackedArrayNet) {
        if (const int n = vpi_get(vpiPackedArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiPackedArrayMember:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const int n = vpi_get(vpiExpanded, obj_h))
            stream_indent(out, indent) << "|vpiExpanded:" << n << "\n";
        if (const int n = vpi_get(vpiImplicitDecl, obj_h))
            stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
        if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
            stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
        if (const int n = vpi_get(vpiNetType, obj_h))
            stream_indent(out, indent) << "|vpiNetType:" << n << "\n";
        if (const int n = vpi_get(vpiResolvedNetType, obj_h))
            stream_indent(out, indent) << "|vpiResolvedNetType:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitScalared, obj_h))
            stream_indent(out, indent) << "|vpiExplicitScalared:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiStrength0, obj_h))
            stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
        if (const int n = vpi_get(vpiStrength1, obj_h))
            stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
        if (const int n = vpi_get(vpiChargeStrength, obj_h))
            stream_indent(out, indent) << "|vpiChargeStrength:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitVectored, obj_h))
            stream_indent(out, indent) << "|vpiExplicitVectored:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiElement, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiElement", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiBit, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiBit", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiSimNet, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiSimNet", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPathTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPathTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTchkTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTchkTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiByteVar) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiBreak) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiSysFuncCall) {
        if (const int n = vpi_get(vpiFuncType, obj_h))
            stream_indent(out, indent) << "|vpiFuncType:" << n << "\n";
        if (const int n = vpi_get(vpiUserDefn, obj_h))
            stream_indent(out, indent) << "|vpiUserDefn:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiUserSystf, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiUserSystf", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiArgument, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiArgument", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiArrayNet) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const int n = vpi_get(vpiExpanded, obj_h))
            stream_indent(out, indent) << "|vpiExpanded:" << n << "\n";
        if (const int n = vpi_get(vpiImplicitDecl, obj_h))
            stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
        if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
            stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
        if (const int n = vpi_get(vpiNetType, obj_h))
            stream_indent(out, indent) << "|vpiNetType:" << n << "\n";
        if (const int n = vpi_get(vpiResolvedNetType, obj_h))
            stream_indent(out, indent) << "|vpiResolvedNetType:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitScalared, obj_h))
            stream_indent(out, indent) << "|vpiExplicitScalared:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiStrength0, obj_h))
            stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
        if (const int n = vpi_get(vpiStrength1, obj_h))
            stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
        if (const int n = vpi_get(vpiChargeStrength, obj_h))
            stream_indent(out, indent) << "|vpiChargeStrength:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitVectored, obj_h))
            stream_indent(out, indent) << "|vpiExplicitVectored:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiNet, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNet", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiSimNet, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiSimNet", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPathTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPathTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTchkTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTchkTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiTypespec) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiModport) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiIODecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIODecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInterface, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInterface", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiEnumVar) {
        if (const int n = vpi_get(vpiPackedArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiPackedArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiIndex, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiIndex", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiStructVar) {
        if (const int n = vpi_get(vpiPackedArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiPackedArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiMember, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMember", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiIndex, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiIndex", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiBit, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiBit", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiEventTypespec) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiNamedEvent) {

        vpiHandle itr;
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiIntTypespec) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiNet) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const int n = vpi_get(vpiExpanded, obj_h))
            stream_indent(out, indent) << "|vpiExpanded:" << n << "\n";
        if (const int n = vpi_get(vpiImplicitDecl, obj_h))
            stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
        if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
            stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
        if (const int n = vpi_get(vpiNetType, obj_h))
            stream_indent(out, indent) << "|vpiNetType:" << n << "\n";
        if (const int n = vpi_get(vpiResolvedNetType, obj_h))
            stream_indent(out, indent) << "|vpiResolvedNetType:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitScalared, obj_h))
            stream_indent(out, indent) << "|vpiExplicitScalared:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiStrength0, obj_h))
            stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
        if (const int n = vpi_get(vpiStrength1, obj_h))
            stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
        if (const int n = vpi_get(vpiChargeStrength, obj_h))
            stream_indent(out, indent) << "|vpiChargeStrength:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitVectored, obj_h))
            stream_indent(out, indent) << "|vpiExplicitVectored:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiBit, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiBit", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiSimNet, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiSimNet", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPathTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPathTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTchkTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTchkTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiForever) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiInterfaceTfDecl) {
        if (const int n = vpi_get(vpiAccessType, obj_h))
            stream_indent(out, indent) << "|vpiAccessType:" << n << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiTask, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTask", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiFunction, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiFunction", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiFinal) {

        vpiHandle itr;
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiRepeatControl) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiPackedArrayTypespec) {
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiIndexTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiIndexTypespec", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiElemTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiElemTypespec", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiConstant) {
        if (const int n = vpi_get(vpiConstType, obj_h))
            stream_indent(out, indent) << "|vpiConstType:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiPortBit) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiExplicitName, obj_h))
            stream_indent(out, indent) << "|vpiExplicitName:" << s << "\n";
        if (const int n = vpi_get(vpiPortIndex, obj_h))
            stream_indent(out, indent) << "|vpiPortIndex:" << n << "\n";
        if (const int n = vpi_get(vpiPortType, obj_h))
            stream_indent(out, indent) << "|vpiPortType:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const int n = vpi_get(vpiConnByName, obj_h))
            stream_indent(out, indent) << "|vpiConnByName:" << n << "\n";
        if (const int n = vpi_get(vpiDirection, obj_h))
            stream_indent(out, indent) << "|vpiDirection:" << n << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypedef, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedef", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiHighConn, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiHighConn", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLowConn, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLowConn", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiShortRealVar) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiLetDecl) { return; }
    if (objectType == vpiImmediateAssume) {
        if (const int n = vpi_get(vpiIsDeferred, obj_h))
            stream_indent(out, indent) << "|vpiIsDeferred:" << n << "\n";
        if (const int n = vpi_get(vpiIsFinal, obj_h))
            stream_indent(out, indent) << "|vpiIsFinal:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const int n = vpi_get(vpiStartLine, obj_h))
            stream_indent(out, indent) << "|vpiStartLine:" << n << "\n";
        if (const int n = vpi_get(vpiColumn, obj_h))
            stream_indent(out, indent) << "|vpiColumn:" << n << "\n";
        if (const int n = vpi_get(vpiEndLine, obj_h))
            stream_indent(out, indent) << "|vpiEndLine:" << n << "\n";
        if (const int n = vpi_get(vpiEndColumn, obj_h))
            stream_indent(out, indent) << "|vpiEndColumn:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiElseStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiElseStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiClockingBlock, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiClockingBlock", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiUnionTypespec) {
        if (const int n = vpi_get(vpiPacked, obj_h))
            stream_indent(out, indent) << "|vpiPacked:" << n << "\n";
        if (const int n = vpi_get(vpiTagged, obj_h))
            stream_indent(out, indent) << "|vpiTagged:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiTypespecMember, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypespecMember", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiParamAssign) {
        if (const int n = vpi_get(vpiConnByName, obj_h))
            stream_indent(out, indent) << "|vpiConnByName:" << n << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiRhs, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRhs", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLhs, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLhs", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiIntegerVar) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiMethodFuncCall) {
        if (const int n = vpi_get(vpiUserDefn, obj_h))
            stream_indent(out, indent) << "|vpiUserDefn:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiPrefix, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPrefix", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiWith, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiWith", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiArgument, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiArgument", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiUserSystf) { return; }
    if (objectType == vpiPrimTerm) {
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiStringVar) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiPropertySpec) {

        vpiHandle itr;
        itr = vpi_handle(vpiClockingEvent, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiClockingEvent", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiDisableCondition, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiDisableCondition", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiPropertyExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPropertyExpr", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiDelayControl) {
        s_vpi_delay delay;
        vpi_get_delays(obj_h, &delay);
        if (delay.da != nullptr) { stream_indent(out, indent) << visit_delays(&delay); }
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiDelay, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiDelay", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiExpectStmt) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiElseStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiElseStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiOperation) {
        if (const int n = vpi_get(vpiOpType, obj_h))
            stream_indent(out, indent) << "|vpiOpType:" << n << "\n";
        if (const int n = vpi_get(vpiOpStrong, obj_h))
            stream_indent(out, indent) << "|vpiOpStrong:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiOperand, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiOperand", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiClassTypespec) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiShortIntVar) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiEventControl) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiCondition, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiCondition", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiCaseItem) {

        vpiHandle itr;
        itr = vpi_iterate(vpiExpr, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiExpr", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiGenScope) {
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiProtected, obj_h))
            stream_indent(out, indent) << "|vpiProtected:" << n << "\n";
        if (const int n = vpi_get(vpiImplicitDecl, obj_h))
            stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiIndex, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiIndex", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNet, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNet", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiArrayNet, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiArrayNet", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiProcess, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiProcess", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimitive, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimitive", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimitiveArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimitiveArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAssertion, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAssertion", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiModule, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiModule", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiModuleArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiModuleArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDefParam, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDefParam", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiGenScopeArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiGenScopeArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiProgram, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiProgram", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiProgramArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiProgramArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInterface, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInterface", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInterfaceArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInterfaceArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAliasStmt, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAliasStmt", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiClockingBlock, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiClockingBlock", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiPathTerm) {

        vpiHandle itr;
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiPropertyDecl) {

        vpiHandle itr;
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiAssignStmt) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiRhs, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRhs", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLhs, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLhs", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiSysTfCall) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiArgument, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiArgument", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiSequenceTypespec) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiNetBit) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const int n = vpi_get(vpiExpanded, obj_h))
            stream_indent(out, indent) << "|vpiExpanded:" << n << "\n";
        if (const int n = vpi_get(vpiImplicitDecl, obj_h))
            stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
        if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
            stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
        if (const int n = vpi_get(vpiNetType, obj_h))
            stream_indent(out, indent) << "|vpiNetType:" << n << "\n";
        if (const int n = vpi_get(vpiResolvedNetType, obj_h))
            stream_indent(out, indent) << "|vpiResolvedNetType:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitScalared, obj_h))
            stream_indent(out, indent) << "|vpiExplicitScalared:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiStrength0, obj_h))
            stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
        if (const int n = vpi_get(vpiStrength1, obj_h))
            stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
        if (const int n = vpi_get(vpiChargeStrength, obj_h))
            stream_indent(out, indent) << "|vpiChargeStrength:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitVectored, obj_h))
            stream_indent(out, indent) << "|vpiExplicitVectored:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiSimNet, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiSimNet", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPathTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPathTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTchkTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTchkTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiUdpDefn) { return; }
    if (objectType == vpiShortIntTypespec) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiFunction) {
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        if (const int n = vpi_get(vpiFuncType, obj_h))
            stream_indent(out, indent) << "|vpiFuncType:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDPICIdentifier, obj_h))
            stream_indent(out, indent) << "|vpiDPICIdentifier:" << s << "\n";
        if (const int n = vpi_get(vpiMethod, obj_h))
            stream_indent(out, indent) << "|vpiMethod:" << n << "\n";
        if (const int n = vpi_get(vpiAccessType, obj_h))
            stream_indent(out, indent) << "|vpiAccessType:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVirtual, obj_h))
            stream_indent(out, indent) << "|vpiVirtual:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiDPIContext, obj_h))
            stream_indent(out, indent) << "|vpiDPIContext:" << n << "\n";
        if (const int n = vpi_get(vpiDPICStr, obj_h))
            stream_indent(out, indent) << "|vpiDPICStr:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiReturn, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiReturn", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiClassDefn, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiClassDefn", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIODecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIODecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiSequenceInst) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const int n = vpi_get(vpiStartLine, obj_h))
            stream_indent(out, indent) << "|vpiStartLine:" << n << "\n";
        if (const int n = vpi_get(vpiColumn, obj_h))
            stream_indent(out, indent) << "|vpiColumn:" << n << "\n";
        if (const int n = vpi_get(vpiEndLine, obj_h))
            stream_indent(out, indent) << "|vpiEndLine:" << n << "\n";
        if (const int n = vpi_get(vpiEndColumn, obj_h))
            stream_indent(out, indent) << "|vpiEndColumn:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiClockingBlock, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiClockingBlock", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiDelayTerm) { return; }
    if (objectType == vpiNamedFork) {
        if (const int n = vpi_get(vpiJoinType, obj_h))
            stream_indent(out, indent) << "|vpiJoinType:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiStmt, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiStmt", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiTimeVar) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiByteTypespec) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiPorts) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiExplicitName, obj_h))
            stream_indent(out, indent) << "|vpiExplicitName:" << s << "\n";
        if (const int n = vpi_get(vpiPortIndex, obj_h))
            stream_indent(out, indent) << "|vpiPortIndex:" << n << "\n";
        if (const int n = vpi_get(vpiPortType, obj_h))
            stream_indent(out, indent) << "|vpiPortType:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const int n = vpi_get(vpiConnByName, obj_h))
            stream_indent(out, indent) << "|vpiConnByName:" << n << "\n";
        if (const int n = vpi_get(vpiDirection, obj_h))
            stream_indent(out, indent) << "|vpiDirection:" << n << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypedef, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedef", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiHighConn, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiHighConn", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLowConn, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLowConn", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiDistribution) { return; }
    if (objectType == vpiInitial) {

        vpiHandle itr;
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiStringTypespec) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiIntVar) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiDoWhile) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiCondition, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiCondition", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiCase) {
        if (const int n = vpi_get(vpiCaseType, obj_h))
            stream_indent(out, indent) << "|vpiCaseType:" << n << "\n";
        if (const int n = vpi_get(vpiQualifier, obj_h))
            stream_indent(out, indent) << "|vpiQualifier:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiCondition, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiCondition", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiCaseItem, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiCaseItem", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiSysTaskCall) {
        if (const int n = vpi_get(vpiUserDefn, obj_h))
            stream_indent(out, indent) << "|vpiUserDefn:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiUserSystf, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiUserSystf", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiArgument, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiArgument", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiPackage) {
        if (const int n = vpi_get(vpiUnit, obj_h))
            stream_indent(out, indent) << "|vpiUnit:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDefName, obj_h))
            stream_indent(out, indent) << "|vpiDefName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiDefFile, obj_h))
            stream_indent(out, indent) << "|vpiDefFile:" << s << "\n";
        if (const char* s = vpi_get_str(vpiLibrary, obj_h))
            stream_indent(out, indent) << "|vpiLibrary:" << s << "\n";
        if (const char* s = vpi_get_str(vpiCell, obj_h))
            stream_indent(out, indent) << "|vpiCell:" << s << "\n";
        if (const char* s = vpi_get_str(vpiConfig, obj_h))
            stream_indent(out, indent) << "|vpiConfig:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiCellInstance, obj_h))
            stream_indent(out, indent) << "|vpiCellInstance:" << n << "\n";
        if (const int n = vpi_get(vpiDefNetType, obj_h))
            stream_indent(out, indent) << "|vpiDefNetType:" << n << "\n";
        if (const int n = vpi_get(vpiDefDelayMode, obj_h))
            stream_indent(out, indent) << "|vpiDefDelayMode:" << n << "\n";
        if (const int n = vpi_get(vpiProtected, obj_h))
            stream_indent(out, indent) << "|vpiProtected:" << n << "\n";
        if (const int n = vpi_get(vpiTimePrecision, obj_h))
            stream_indent(out, indent) << "|vpiTimePrecision:" << n << "\n";
        if (const int n = vpi_get(vpiTimeUnit, obj_h))
            stream_indent(out, indent) << "|vpiTimeUnit:" << n << "\n";
        if (const int n = vpi_get(vpiUnconnDrive, obj_h))
            stream_indent(out, indent) << "|vpiUnconnDrive:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiTop, obj_h))
            stream_indent(out, indent) << "|vpiTop:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiTaskFunc, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTaskFunc", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNet, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNet", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiArrayNet, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiArrayNet", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAssertion, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAssertion", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiClassDefn, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiClassDefn", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiProgram, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiProgram", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiProgramArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiProgramArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSpecParam, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSpecParam", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiModPath) {

        vpiHandle itr;
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiRealVar) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiStmt) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiLogicVar) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiBit, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiBit", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiIf) {
        if (const int n = vpi_get(vpiQualifier, obj_h))
            stream_indent(out, indent) << "|vpiQualifier:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiCondition, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiCondition", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiRefObj) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiDefName, obj_h))
            stream_indent(out, indent) << "|vpiDefName:" << s << "\n";
        if (const int n = vpi_get(vpiGeneric, obj_h))
            stream_indent(out, indent) << "|vpiGeneric:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTaskFunc, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTaskFunc", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiActual, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiActual", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiVirtualInterfaceVar) { return; }
    if (objectType == vpiIfElse) {
        if (const int n = vpi_get(vpiQualifier, obj_h))
            stream_indent(out, indent) << "|vpiQualifier:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiCondition, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiCondition", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiElseStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiElseStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiForeachStmt) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiVariables, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiVariables", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLoopVars, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLoopVars", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiAliasStmt) { return; }
    if (objectType == vpiAssignment) {
        if (const int n = vpi_get(vpiOpType, obj_h))
            stream_indent(out, indent) << "|vpiOpType:" << n << "\n";
        if (const int n = vpi_get(vpiBlocking, obj_h))
            stream_indent(out, indent) << "|vpiBlocking:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiLhs, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLhs", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiDelayControl, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiDelayControl", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiEventControl, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiEventControl", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRepeatControl, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRepeatControl", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRhs, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRhs", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiRelease) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiLhs, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLhs", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiTypeParameter) {
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiLocalParam, obj_h))
            stream_indent(out, indent) << "|vpiLocalParam:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiClassDefn) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiNullStmt) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiTimeTypespec) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiEnumNet) {
        if (const int n = vpi_get(vpiPackedArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiPackedArrayMember:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const int n = vpi_get(vpiExpanded, obj_h))
            stream_indent(out, indent) << "|vpiExpanded:" << n << "\n";
        if (const int n = vpi_get(vpiImplicitDecl, obj_h))
            stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
        if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
            stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
        if (const int n = vpi_get(vpiNetType, obj_h))
            stream_indent(out, indent) << "|vpiNetType:" << n << "\n";
        if (const int n = vpi_get(vpiResolvedNetType, obj_h))
            stream_indent(out, indent) << "|vpiResolvedNetType:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitScalared, obj_h))
            stream_indent(out, indent) << "|vpiExplicitScalared:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiStrength0, obj_h))
            stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
        if (const int n = vpi_get(vpiStrength1, obj_h))
            stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
        if (const int n = vpi_get(vpiChargeStrength, obj_h))
            stream_indent(out, indent) << "|vpiChargeStrength:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitVectored, obj_h))
            stream_indent(out, indent) << "|vpiExplicitVectored:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiBit, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiBit", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiSimNet, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiSimNet", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPathTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPathTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTchkTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTchkTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiStructNet) {
        if (const int n = vpi_get(vpiPackedArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiPackedArrayMember:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const int n = vpi_get(vpiExpanded, obj_h))
            stream_indent(out, indent) << "|vpiExpanded:" << n << "\n";
        if (const int n = vpi_get(vpiImplicitDecl, obj_h))
            stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
        if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
            stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
        if (const int n = vpi_get(vpiNetType, obj_h))
            stream_indent(out, indent) << "|vpiNetType:" << n << "\n";
        if (const int n = vpi_get(vpiResolvedNetType, obj_h))
            stream_indent(out, indent) << "|vpiResolvedNetType:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitScalared, obj_h))
            stream_indent(out, indent) << "|vpiExplicitScalared:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiStrength0, obj_h))
            stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
        if (const int n = vpi_get(vpiStrength1, obj_h))
            stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
        if (const int n = vpi_get(vpiChargeStrength, obj_h))
            stream_indent(out, indent) << "|vpiChargeStrength:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitVectored, obj_h))
            stream_indent(out, indent) << "|vpiExplicitVectored:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiMember, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMember", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiBit, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiBit", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiSimNet, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiSimNet", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPathTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPathTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTchkTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTchkTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiModuleArray) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInstance, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInstance", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiModule, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiModule", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiContinue) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiMethodTaskCall) {
        if (const int n = vpi_get(vpiUserDefn, obj_h))
            stream_indent(out, indent) << "|vpiUserDefn:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiPrefix, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPrefix", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiWith, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiWith", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiArgument, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiArgument", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiTaskFunc) {
        if (const char* s = vpi_get_str(vpiDPICIdentifier, obj_h))
            stream_indent(out, indent) << "|vpiDPICIdentifier:" << s << "\n";
        if (const int n = vpi_get(vpiMethod, obj_h))
            stream_indent(out, indent) << "|vpiMethod:" << n << "\n";
        if (const int n = vpi_get(vpiAccessType, obj_h))
            stream_indent(out, indent) << "|vpiAccessType:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVirtual, obj_h))
            stream_indent(out, indent) << "|vpiVirtual:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiDPIContext, obj_h))
            stream_indent(out, indent) << "|vpiDPIContext:" << n << "\n";
        if (const int n = vpi_get(vpiDPICStr, obj_h))
            stream_indent(out, indent) << "|vpiDPICStr:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiReturn, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiReturn", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiClassDefn, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiClassDefn", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIODecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIODecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiPackedArrayVar) {
        if (const int n = vpi_get(vpiPackedArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiPackedArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const int n = vpi_get(vpiPacked, obj_h))
            stream_indent(out, indent) << "|vpiPacked:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiIndex, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiIndex", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiBit, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiBit", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiElement, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiElement", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiPartSelect) {
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiParent, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiParent", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiFor) {
        if (const int n = vpi_get(vpiLocalVarDecls, obj_h))
            stream_indent(out, indent) << "|vpiLocalVarDecls:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiCondition, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiCondition", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiForInitStmt, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiForInitStmt", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiForIncStmt, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiForIncStmt", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiForInitStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiForInitStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiForIncStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiForIncStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiFuncCall) {
        if (const int n = vpi_get(vpiFuncType, obj_h))
            stream_indent(out, indent) << "|vpiFuncType:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiFunction, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiFunction", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiArgument, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiArgument", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiDefParam) {

        vpiHandle itr;
        itr = vpi_handle(vpiRhs, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRhs", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLhs, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLhs", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiArrayVar) {
        if (const int n = vpi_get(vpiArrayType, obj_h))
            stream_indent(out, indent) << "|vpiArrayType:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVarSelect, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVarSelect", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiForce) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiRhs, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRhs", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLhs, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLhs", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiSequenceDecl) {

        vpiHandle itr;
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiVariables) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiNamedBegin) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiStmt, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiStmt", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiScope) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiSpecParam) {
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiInstanceArray) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInstance, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInstance", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiModule, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiModule", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiTypespecMember) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiIntegerNet) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const int n = vpi_get(vpiExpanded, obj_h))
            stream_indent(out, indent) << "|vpiExpanded:" << n << "\n";
        if (const int n = vpi_get(vpiImplicitDecl, obj_h))
            stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
        if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
            stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
        if (const int n = vpi_get(vpiNetType, obj_h))
            stream_indent(out, indent) << "|vpiNetType:" << n << "\n";
        if (const int n = vpi_get(vpiResolvedNetType, obj_h))
            stream_indent(out, indent) << "|vpiResolvedNetType:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitScalared, obj_h))
            stream_indent(out, indent) << "|vpiExplicitScalared:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiStrength0, obj_h))
            stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
        if (const int n = vpi_get(vpiStrength1, obj_h))
            stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
        if (const int n = vpi_get(vpiChargeStrength, obj_h))
            stream_indent(out, indent) << "|vpiChargeStrength:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitVectored, obj_h))
            stream_indent(out, indent) << "|vpiExplicitVectored:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiBit, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiBit", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiSimNet, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiSimNet", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPathTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPathTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTchkTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTchkTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiRegArray) {
        if (const int n = vpi_get(vpiIsMemory, obj_h))
            stream_indent(out, indent) << "|vpiIsMemory:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemoryWord, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemoryWord", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiConstraint) {

        vpiHandle itr;
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiInterfaceTypespec) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiInstance) {
        if (const char* s = vpi_get_str(vpiDefName, obj_h))
            stream_indent(out, indent) << "|vpiDefName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiDefFile, obj_h))
            stream_indent(out, indent) << "|vpiDefFile:" << s << "\n";
        if (const char* s = vpi_get_str(vpiLibrary, obj_h))
            stream_indent(out, indent) << "|vpiLibrary:" << s << "\n";
        if (const char* s = vpi_get_str(vpiCell, obj_h))
            stream_indent(out, indent) << "|vpiCell:" << s << "\n";
        if (const char* s = vpi_get_str(vpiConfig, obj_h))
            stream_indent(out, indent) << "|vpiConfig:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiCellInstance, obj_h))
            stream_indent(out, indent) << "|vpiCellInstance:" << n << "\n";
        if (const int n = vpi_get(vpiDefNetType, obj_h))
            stream_indent(out, indent) << "|vpiDefNetType:" << n << "\n";
        if (const int n = vpi_get(vpiDefDelayMode, obj_h))
            stream_indent(out, indent) << "|vpiDefDelayMode:" << n << "\n";
        if (const int n = vpi_get(vpiProtected, obj_h))
            stream_indent(out, indent) << "|vpiProtected:" << n << "\n";
        if (const int n = vpi_get(vpiTimePrecision, obj_h))
            stream_indent(out, indent) << "|vpiTimePrecision:" << n << "\n";
        if (const int n = vpi_get(vpiTimeUnit, obj_h))
            stream_indent(out, indent) << "|vpiTimeUnit:" << n << "\n";
        if (const int n = vpi_get(vpiUnconnDrive, obj_h))
            stream_indent(out, indent) << "|vpiUnconnDrive:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiTop, obj_h))
            stream_indent(out, indent) << "|vpiTop:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiTaskFunc, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTaskFunc", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNet, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNet", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiArrayNet, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiArrayNet", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAssertion, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAssertion", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiClassDefn, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiClassDefn", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiProgram, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiProgram", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiProgramArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiProgramArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSpecParam, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSpecParam", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiBegin) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiStmt, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiStmt", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiVoidTypespec) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiContAssignBit) {
        if (const int n = vpi_get(vpiOffset, obj_h))
            stream_indent(out, indent) << "|vpiOffset:" << n << "\n";
        if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
            stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
        if (const int n = vpi_get(vpiStrength0, obj_h))
            stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
        if (const int n = vpi_get(vpiStrength1, obj_h))
            stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiDelay, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiDelay", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRhs, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRhs", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLhs, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLhs", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiClassVar) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiIndexedPartSelect) {
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const int n = vpi_get(vpiIndexedPartSelectType, obj_h))
            stream_indent(out, indent) << "|vpiIndexedPartSelectType:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiBaseExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiBaseExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiWidthExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiWidthExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiDeassign) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiLhs, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLhs", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiUdpArray) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiDelay, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiDelay", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimitive, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimitive", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInstance, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInstance", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiModule, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiModule", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiGateArray) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiDelay, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiDelay", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimitive, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimitive", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInstance, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInstance", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiModule, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiModule", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiUnsupportedExpr) {
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiExpr) {
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiRealTypespec) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiProgram) {
        if (const int n = vpi_get(vpiIndex, obj_h))
            stream_indent(out, indent) << "|vpiIndex:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDefName, obj_h))
            stream_indent(out, indent) << "|vpiDefName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiDefFile, obj_h))
            stream_indent(out, indent) << "|vpiDefFile:" << s << "\n";
        if (const char* s = vpi_get_str(vpiLibrary, obj_h))
            stream_indent(out, indent) << "|vpiLibrary:" << s << "\n";
        if (const char* s = vpi_get_str(vpiCell, obj_h))
            stream_indent(out, indent) << "|vpiCell:" << s << "\n";
        if (const char* s = vpi_get_str(vpiConfig, obj_h))
            stream_indent(out, indent) << "|vpiConfig:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiCellInstance, obj_h))
            stream_indent(out, indent) << "|vpiCellInstance:" << n << "\n";
        if (const int n = vpi_get(vpiDefNetType, obj_h))
            stream_indent(out, indent) << "|vpiDefNetType:" << n << "\n";
        if (const int n = vpi_get(vpiDefDelayMode, obj_h))
            stream_indent(out, indent) << "|vpiDefDelayMode:" << n << "\n";
        if (const int n = vpi_get(vpiProtected, obj_h))
            stream_indent(out, indent) << "|vpiProtected:" << n << "\n";
        if (const int n = vpi_get(vpiTimePrecision, obj_h))
            stream_indent(out, indent) << "|vpiTimePrecision:" << n << "\n";
        if (const int n = vpi_get(vpiTimeUnit, obj_h))
            stream_indent(out, indent) << "|vpiTimeUnit:" << n << "\n";
        if (const int n = vpi_get(vpiUnconnDrive, obj_h))
            stream_indent(out, indent) << "|vpiUnconnDrive:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiTop, obj_h))
            stream_indent(out, indent) << "|vpiTop:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiInstanceArray, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstanceArray", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiProcess, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiProcess", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiDefaultClocking, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiDefaultClocking", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInterface, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInterface", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInterfaceArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInterfaceArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiClockingBlock, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiClockingBlock", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPort, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPort", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiGenScopeArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiGenScopeArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiDefaultDisableIff, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiDefaultDisableIff", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTaskFunc, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTaskFunc", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNet, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNet", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiArrayNet, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiArrayNet", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAssertion, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAssertion", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiClassDefn, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiClassDefn", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiProgram, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiProgram", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiProgramArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiProgramArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSpecParam, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSpecParam", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiVarSelect) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiIndex, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiIndex", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiUnsupportedStmt) {
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiUnionVar) {
        if (const int n = vpi_get(vpiPackedArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiPackedArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiMember, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMember", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiIndex, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiIndex", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiBit, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiBit", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiAlways) {
        if (const int n = vpi_get(vpiAlwaysType, obj_h))
            stream_indent(out, indent) << "|vpiAlwaysType:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiGenScopeArray) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiGenVar, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiGenVar", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiGenScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiGenScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiIntegerTypespec) {
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiNets) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const int n = vpi_get(vpiExpanded, obj_h))
            stream_indent(out, indent) << "|vpiExpanded:" << n << "\n";
        if (const int n = vpi_get(vpiImplicitDecl, obj_h))
            stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
        if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
            stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
        if (const int n = vpi_get(vpiNetType, obj_h))
            stream_indent(out, indent) << "|vpiNetType:" << n << "\n";
        if (const int n = vpi_get(vpiResolvedNetType, obj_h))
            stream_indent(out, indent) << "|vpiResolvedNetType:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitScalared, obj_h))
            stream_indent(out, indent) << "|vpiExplicitScalared:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiStrength0, obj_h))
            stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
        if (const int n = vpi_get(vpiStrength1, obj_h))
            stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
        if (const int n = vpi_get(vpiChargeStrength, obj_h))
            stream_indent(out, indent) << "|vpiChargeStrength:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitVectored, obj_h))
            stream_indent(out, indent) << "|vpiExplicitVectored:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiSimNet, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiSimNet", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPathTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPathTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTchkTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTchkTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiTchk) {
        s_vpi_delay delay;
        vpi_get_delays(obj_h, &delay);
        if (delay.da != nullptr) { stream_indent(out, indent) << visit_delays(&delay); }
        if (const int n = vpi_get(vpiTchkType, obj_h))
            stream_indent(out, indent) << "|vpiTchkType:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiDelay, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiDelay", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkNotifier, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkNotifier", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkRefTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkRefTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkDataTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkDataTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiExpr, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiExpr", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiLongIntVar) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiArrayTypespec) {
        if (const int n = vpi_get(vpiArrayType, obj_h))
            stream_indent(out, indent) << "|vpiArrayType:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiIndexTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiIndexTypespec", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiElemTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiElemTypespec", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiTask) {
        if (const char* s = vpi_get_str(vpiDPICIdentifier, obj_h))
            stream_indent(out, indent) << "|vpiDPICIdentifier:" << s << "\n";
        if (const int n = vpi_get(vpiMethod, obj_h))
            stream_indent(out, indent) << "|vpiMethod:" << n << "\n";
        if (const int n = vpi_get(vpiAccessType, obj_h))
            stream_indent(out, indent) << "|vpiAccessType:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVirtual, obj_h))
            stream_indent(out, indent) << "|vpiVirtual:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiDPIContext, obj_h))
            stream_indent(out, indent) << "|vpiDPIContext:" << n << "\n";
        if (const int n = vpi_get(vpiDPICStr, obj_h))
            stream_indent(out, indent) << "|vpiDPICStr:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiReturn, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiReturn", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiClassDefn, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiClassDefn", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIODecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIODecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiNamedEventArray) { return; }
    if (objectType == vpiClockingBlock) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiTimeNet) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const int n = vpi_get(vpiExpanded, obj_h))
            stream_indent(out, indent) << "|vpiExpanded:" << n << "\n";
        if (const int n = vpi_get(vpiImplicitDecl, obj_h))
            stream_indent(out, indent) << "|vpiImplicitDecl:" << n << "\n";
        if (const int n = vpi_get(vpiNetDeclAssign, obj_h))
            stream_indent(out, indent) << "|vpiNetDeclAssign:" << n << "\n";
        if (const int n = vpi_get(vpiNetType, obj_h))
            stream_indent(out, indent) << "|vpiNetType:" << n << "\n";
        if (const int n = vpi_get(vpiResolvedNetType, obj_h))
            stream_indent(out, indent) << "|vpiResolvedNetType:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitScalared, obj_h))
            stream_indent(out, indent) << "|vpiExplicitScalared:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiStrength0, obj_h))
            stream_indent(out, indent) << "|vpiStrength0:" << n << "\n";
        if (const int n = vpi_get(vpiStrength1, obj_h))
            stream_indent(out, indent) << "|vpiStrength1:" << n << "\n";
        if (const int n = vpi_get(vpiChargeStrength, obj_h))
            stream_indent(out, indent) << "|vpiChargeStrength:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const int n = vpi_get(vpiExplicitVectored, obj_h))
            stream_indent(out, indent) << "|vpiExplicitVectored:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_iterate(vpiBit, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiBit", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLocalLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLocalLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiSimNet, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiSimNet", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPathTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPathTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTchkTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTchkTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiRange) {
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiMulticlockSequenceExpr) { return; }
    if (objectType == vpiConcurrentAssertions) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiIsClockInferred, obj_h))
            stream_indent(out, indent) << "|vpiIsClockInferred:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiClockingEvent, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiClockingEvent", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiProperty, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiProperty", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiImmediateCover) {
        if (const int n = vpi_get(vpiIsDeferred, obj_h))
            stream_indent(out, indent) << "|vpiIsDeferred:" << n << "\n";
        if (const int n = vpi_get(vpiIsFinal, obj_h))
            stream_indent(out, indent) << "|vpiIsFinal:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const int n = vpi_get(vpiStartLine, obj_h))
            stream_indent(out, indent) << "|vpiStartLine:" << n << "\n";
        if (const int n = vpi_get(vpiColumn, obj_h))
            stream_indent(out, indent) << "|vpiColumn:" << n << "\n";
        if (const int n = vpi_get(vpiEndLine, obj_h))
            stream_indent(out, indent) << "|vpiEndLine:" << n << "\n";
        if (const int n = vpi_get(vpiEndColumn, obj_h))
            stream_indent(out, indent) << "|vpiEndColumn:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiStmt, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiStmt", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiClockingBlock, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiClockingBlock", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiLongIntTypespec) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiModule) {
        if (const int n = vpi_get(vpiIndex, obj_h))
            stream_indent(out, indent) << "|vpiIndex:" << n << "\n";
        if (const int n = vpi_get(vpiTopModule, obj_h))
            stream_indent(out, indent) << "|vpiTopModule:" << n << "\n";
        if (const int n = vpi_get(vpiDefDecayTime, obj_h))
            stream_indent(out, indent) << "|vpiDefDecayTime:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDefName, obj_h))
            stream_indent(out, indent) << "|vpiDefName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiDefFile, obj_h))
            stream_indent(out, indent) << "|vpiDefFile:" << s << "\n";
        if (const char* s = vpi_get_str(vpiLibrary, obj_h))
            stream_indent(out, indent) << "|vpiLibrary:" << s << "\n";
        if (const char* s = vpi_get_str(vpiCell, obj_h))
            stream_indent(out, indent) << "|vpiCell:" << s << "\n";
        if (const char* s = vpi_get_str(vpiConfig, obj_h))
            stream_indent(out, indent) << "|vpiConfig:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiCellInstance, obj_h))
            stream_indent(out, indent) << "|vpiCellInstance:" << n << "\n";
        if (const int n = vpi_get(vpiDefNetType, obj_h))
            stream_indent(out, indent) << "|vpiDefNetType:" << n << "\n";
        if (const int n = vpi_get(vpiDefDelayMode, obj_h))
            stream_indent(out, indent) << "|vpiDefDelayMode:" << n << "\n";
        if (const int n = vpi_get(vpiProtected, obj_h))
            stream_indent(out, indent) << "|vpiProtected:" << n << "\n";
        if (const int n = vpi_get(vpiTimePrecision, obj_h))
            stream_indent(out, indent) << "|vpiTimePrecision:" << n << "\n";
        if (const int n = vpi_get(vpiTimeUnit, obj_h))
            stream_indent(out, indent) << "|vpiTimeUnit:" << n << "\n";
        if (const int n = vpi_get(vpiUnconnDrive, obj_h))
            stream_indent(out, indent) << "|vpiUnconnDrive:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiTop, obj_h))
            stream_indent(out, indent) << "|vpiTop:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiInstanceArray, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstanceArray", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiProcess, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiProcess", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimitive, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimitive", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimitiveArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimitiveArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiGlobalClocking, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiGlobalClocking", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiDefaultClocking, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiDefaultClocking", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModuleArray, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModuleArray", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPort, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPort", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInterface, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInterface", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInterfaceArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInterfaceArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiModule, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiModule", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiModuleArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiModuleArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiModPath, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiModPath", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTchk, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTchk", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDefParam, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDefParam", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIODecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIODecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAliasStmt, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAliasStmt", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiClockingBlock, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiClockingBlock", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiGenScopeArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiGenScopeArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiDefaultDisableIff, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiDefaultDisableIff", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTaskFunc, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTaskFunc", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNet, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNet", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiArrayNet, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiArrayNet", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAssertion, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAssertion", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiClassDefn, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiClassDefn", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiProgram, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiProgram", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiProgramArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiProgramArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSpecParam, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSpecParam", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiConcurrentAssertions, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiConcurrentAssertions", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVariables, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVariables", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInternalScope, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInternalScope", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiTypedef, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiTypedef", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPropertyDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPropertyDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiSequenceDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiSequenceDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEvent, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEvent", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiNamedEventArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiNamedEventArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiVirtualInterfaceVar, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiVirtualInterfaceVar", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiReg, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiReg", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRegArray, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRegArray", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiMemory, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiMemory", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLetDecl, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLetDecl", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiParameter, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParameter", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiImport, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiImport", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiBitSelect) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiIndex, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiIndex", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiShortRealTypespec) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiTypedefAlias, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedefAlias", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiPrimitiveArray) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiDelay, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiDelay", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimitive, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimitive", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInstance, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInstance", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiModule, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiModule", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiInterfaceArray) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";

        vpiHandle itr;
        itr = vpi_iterate(vpiParamAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiParamAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiInstance, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiInstance", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiModule, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiModule", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiIODecl) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const int n = vpi_get(vpiDirection, obj_h))
            stream_indent(out, indent) << "|vpiDirection:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";

        vpiHandle itr;
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypedef, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypedef", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTaskFunc, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTaskFunc", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiUdpDefn, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiUdpDefn", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiVarBit) {
        if (const int n = vpi_get(vpiConstantSelect, obj_h))
            stream_indent(out, indent) << "|vpiConstantSelect:" << n << "\n";
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiIndex, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiIndex", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
    if (objectType == vpiBitVar) {
        if (const char* s = vpi_get_str(vpiName, obj_h))
            stream_indent(out, indent) << "|vpiName:" << s << "\n";
        if (const char* s = vpi_get_str(vpiFullName, obj_h))
            stream_indent(out, indent) << "|vpiFullName:" << s << "\n";
        if (const int n = vpi_get(vpiArrayMember, obj_h))
            stream_indent(out, indent) << "|vpiArrayMember:" << n << "\n";
        if (const int n = vpi_get(vpiSigned, obj_h))
            stream_indent(out, indent) << "|vpiSigned:" << n << "\n";
        if (const int n = vpi_get(vpiAutomatic, obj_h))
            stream_indent(out, indent) << "|vpiAutomatic:" << n << "\n";
        if (const int n = vpi_get(vpiAllocScheme, obj_h))
            stream_indent(out, indent) << "|vpiAllocScheme:" << n << "\n";
        if (const int n = vpi_get(vpiConstantVariable, obj_h))
            stream_indent(out, indent) << "|vpiConstantVariable:" << n << "\n";
        if (const int n = vpi_get(vpiIsRandomized, obj_h))
            stream_indent(out, indent) << "|vpiIsRandomized:" << n << "\n";
        if (const int n = vpi_get(vpiRandType, obj_h))
            stream_indent(out, indent) << "|vpiRandType:" << n << "\n";
        if (const int n = vpi_get(vpiStructUnionMember, obj_h))
            stream_indent(out, indent) << "|vpiStructUnionMember:" << n << "\n";
        if (const int n = vpi_get(vpiScalar, obj_h))
            stream_indent(out, indent) << "|vpiScalar:" << n << "\n";
        if (const int n = vpi_get(vpiVisibility, obj_h))
            stream_indent(out, indent) << "|vpiVisibility:" << n << "\n";
        if (const int n = vpi_get(vpiVector, obj_h))
            stream_indent(out, indent) << "|vpiVector:" << n << "\n";
        if (const char* s = vpi_get_str(vpiDecompile, obj_h))
            stream_indent(out, indent) << "|vpiDecompile:" << s << "\n";
        if (const int n = vpi_get(vpiSize, obj_h))
            stream_indent(out, indent) << "|vpiSize:" << n << "\n";
        s_vpi_value value;
        vpi_get_value(obj_h, &value);
        if (value.format) { stream_indent(out, indent) << visit_value(&value); }

        vpiHandle itr;
        itr = vpi_handle(vpiLeftRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiLeftRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiRightRange, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiRightRange", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiRange, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiRange", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiBit, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiBit", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPortInst, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPortInst", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiInstance, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiInstance", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiScope, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiScope", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiExpr, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiExpr", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiIndex, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiIndex", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiPrimTerm, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiPrimTerm", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiContAssign, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiContAssign", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiPathTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiPathTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiTchkTerm, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTchkTerm", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_handle(vpiModule, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiModule", visited, out, fout);
        vpi_free_object(itr);
        itr = vpi_iterate(vpiAttribute, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiAttribute", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiDriver, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiDriver", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiLoad, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiLoad", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_iterate(vpiUse, obj_h);
        while (vpiHandle obj = vpi_scan(itr)) {
            visit_object(obj, subobject_indent, "vpiUse", visited, out, fout);
            vpi_free_object(obj);
        }
        vpi_free_object(itr);
        itr = vpi_handle(vpiTypespec, obj_h);
        if (itr) visit_object(itr, subobject_indent, "vpiTypespec", visited, out, fout);
        vpi_free_object(itr);

        return;
    }
}

// Public interface
void dump_visited(const std::vector<vpiHandle>& designs, std::ostream& out, std::ostream& fout) {
    for (auto design : designs) {
        std::set<const BaseClass*> visited;
        visit_object(design, 0, "", &visited, out, fout);
    }
}

std::string dump_visited(const std::vector<vpiHandle>& designs) {
    std::stringstream out;
    std::stringstream fout;
    dump_visited(designs, out, fout);
    return fout.str();
}

};  // namespace UHDM
