name: 'main'

on:
  push:
    branches:
      - uhdm-verilator
  pull_request:

jobs:

  build-binaries:
    runs-on: ubuntu-latest
    env:
      CC: gcc-9
      CXX: g++-9

    steps:

    - name: Install dependencies
      run: |
        sudo apt-get update -qq
        sudo apt install -y g++-9 build-essential cmake tclsh ant default-jre swig google-perftools libgoogle-perftools-dev python3 python3-dev uuid uuid-dev tcl-dev flex libfl-dev

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - uses: actions/setup-python@v2
      with:
         python-version: '3.7'

    - name: Build binaries
      run: |
        ./build_binaries.sh
        # By default actions/upload-artifact@v2 do not preserve file permissions
        # tar directory to workaround this issue
        # See https://github.com/actions/upload-artifact/issues/38
        tar -cvf binaries.tar image

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        name: binaries
        path: binaries.tar

  build-macos:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - uses: actions/setup-python@v2
      with:
         python-version: '3.7'

    - name: Build binaries
      run: |
        export CPU_COUNT=`sysctl -n hw.logicalcpu`
        ./build_binaries.sh

    - name: Run MultipleCells test
      run: ./uhdm-integration/.github/ci.sh
      env:
        TEST_CASE: tests/cmake/MultipleCells
        TARGET: uhdm/verilator/test-cmake

  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 1

      - uses: actions/setup-python@v2
        with:
           python-version: '3.7'

      - name: Generate matrix
        id: generate-matrix
        run: |
          matrix="$(cd uhdm-integration && python list.py -d tests -s cmake ibex synthesis swerv OneClass hello-uvm OneThis opentitan CastStructArray)"
          echo "::set-output name=matrix::$matrix"
          echo "Matrix: $matrix"

  generate-ibex-modules:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-ibex-modules.outputs.matrix }}
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 1

      - uses: actions/setup-python@v2
        with:
           python-version: '3.7'

      - name: Generate matrix
        id: generate-ibex-modules
        run: |
          matrix="$(cd uhdm-integration && python list.py -d tests/ibex/module_tests)"
          echo "::set-output name=matrix::$matrix"
          echo "Matrix: $matrix"

  tests:
    runs-on: ubuntu-latest
    needs: [build-binaries, generate-matrix]
    strategy:
      matrix:
        TEST_CASE: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
      fail-fast:
        false
    env:
      CC: gcc-9
      CXX: g++-9
      GIT_HTTP_LOW_SPEED_LIMIT: 1
      GIT_HTTP_LOW_SPEED_TIME: 600
      TARGET: uhdm/verilator/test-ast

    steps:

    - name: Install dependencies
      run: |
        sudo apt-get update -qq
        sudo apt install -y g++-9 build-essential cmake tclsh ant default-jre swig google-perftools libgoogle-perftools-dev python3 python3-dev uuid uuid-dev tcl-dev flex libfl-dev

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - uses: actions/setup-python@v2
      with:
         python-version: '3.7'

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    # See https://github.com/actions/upload-artifact/issues/38
    - name: Extract
      run: tar -xf binaries.tar

    - name: Build & Test
      run: ./uhdm-integration/.github/ci.sh
      env:
        TEST_CASE: ${{ matrix.TEST_CASE }}


  ibex-module-tests:
    runs-on: ubuntu-latest
    needs: [build-binaries, generate-ibex-modules]
    strategy:
      matrix:
        TEST_CASE: ${{ fromJson(needs.generate-ibex-modules.outputs.matrix) }}
        TARGET:
          - uhdm/verilator/test-ast
      fail-fast:
        false
    env:
      CC: gcc-9
      CXX: g++-9
      GIT_HTTP_LOW_SPEED_LIMIT: 1
      GIT_HTTP_LOW_SPEED_TIME: 600

    steps:

    - name: Install dependencies
      run: |
        sudo apt-get update -qq
        sudo apt install -y g++-9 build-essential cmake tclsh ant default-jre swig google-perftools libgoogle-perftools-dev python3 python3-dev uuid uuid-dev tcl-dev flex libfl-dev

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - uses: actions/setup-python@v2
      with:
         python-version: '3.7'

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    # See https://github.com/actions/upload-artifact/issues/38
    - name: Extract
      run: tar -xf binaries.tar

    - name: Build & Test
      run: |
        pip install virtualenv
        virtualenv venv-ibex
        . venv-ibex/bin/activate
        pip install -r uhdm-tests/ibex/ibex/python-requirements.txt
        cd uhdm-tests/ibex/ibex
        fusesoc --cores-root=. run --target=synth --setup lowrisc:ibex:top_artya7 --part xc7a35ticsg324-1L
        fusesoc --cores-root=. run --target=sim --setup lowrisc:ibex:ibex_simple_system --RV32E=0 --RV32M=ibex_pkg::RV32MFast
        cd ../../..
        ./uhdm-integration/.github/ci.sh
      env:
        TEST_CASE: ${{ matrix.TEST_CASE }}
        TARGET: ${{ matrix.TARGET }}

  generate-opentitan-modules:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-opentitan-modules.outputs.matrix }}
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 1

      - uses: actions/setup-python@v2
        with:
           python-version: '3.7'

      - name: Generate matrix
        id: generate-opentitan-modules
        run: |
          matrix="$(cd uhdm-integration && python list.py -d tests/opentitan/module_tests)"
          echo "::set-output name=matrix::$matrix"
          echo "Matrix: $matrix"

  opentitan-module-tests:
    runs-on: ubuntu-latest
    needs: [build-binaries, generate-opentitan-modules]
    strategy:
      matrix:
        TEST_CASE: ${{ fromJson(needs.generate-opentitan-modules.outputs.matrix) }}
        TARGET:
          - uhdm/verilator/test-ast
      fail-fast:
        false
    env:
      CC: gcc-9
      CXX: g++-9
      GIT_HTTP_LOW_SPEED_LIMIT: 1
      GIT_HTTP_LOW_SPEED_TIME: 600

    steps:

    - name: Install dependencies
      run: |
        sudo apt-get update -qq
        sudo apt install -y g++-9 build-essential cmake tclsh ant default-jre swig google-perftools libgoogle-perftools-dev python3 python3-dev uuid uuid-dev tcl-dev flex libfl-dev

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - uses: actions/setup-python@v2
      with:
         python-version: '3.7'

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    # See https://github.com/actions/upload-artifact/issues/38
    - name: Extract
      run: tar -xf binaries.tar

    - name: Build & Test
      run: |
        pip install virtualenv
        virtualenv venv-opentitan
        . venv-opentitan/bin/activate
        pip install -r uhdm-tests/opentitan/opentitan-current/python-requirements.txt
        cd uhdm-tests/opentitan/opentitan-current
        fusesoc --cores-root=. run --flag=fileset_top --target=sim --setup lowrisc:dv:chip_verilator_sim
        cd ../../..
        ./uhdm-integration/.github/ci.sh
      env:
        TEST_CASE: ${{ matrix.TEST_CASE }}
        TARGET: ${{ matrix.TARGET }}

  opentitan-earlgrey-current:
    runs-on: ubuntu-latest
    needs: build-binaries
    env:
      CC: gcc-9
      CXX: g++-9

    steps:

    - name: Install dependencies
      run: |
        sudo apt-get update -qq
        sudo apt install -y g++-9 build-essential cmake tclsh ant default-jre swig google-perftools libgoogle-perftools-dev python3 python3-dev uuid uuid-dev tcl-dev flex libfl-dev libelf-dev ninja-build

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - uses: actions/setup-python@v2
      with:
         python-version: '3.7'

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    # See https://github.com/actions/upload-artifact/issues/38
    - name: Extract
      run: tar -xf binaries.tar

    - name: Prepare output directory
      run: mkdir output_uhdm_vanilla_verilator

    - name: Build & Test (uhdm verilator)
      run: |
        pip install virtualenv
        ./uhdm-integration/.github/ci.sh
        set -o pipefail
        timeout 5m ./uhdm-integration/build/lowrisc_dv_chip_verilator_sim_0.1/sim-verilator/Vchip_sim_tb --meminit=rom,uhdm-tests/opentitan/opentitan_current_sw/boot_rom_sim_verilator.scr.39.vmem --meminit=otp,uhdm-tests/opentitan/opentitan_current_sw/otp_img_sim_verilator.vmem --meminit=flash,uhdm-tests/opentitan/opentitan_current_sw/otbn_smoketest_sim_verilator.elf | tee output_uhdm_vanilla_verilator/uhdm_verilator_simulation.log
        cp uart0.log output_uhdm_vanilla_verilator/uhdm_verilator_uart.log
        cp trace_core_00000000.log output_uhdm_vanilla_verilator/uhdm_verilator_trace.log
      env:
        TARGET: uhdm/verilator/opentitan
        TEST_CASE: tests/opentitan

    - name: Build & Test (vanilla verilator)
      run: |
        pip install virtualenv
        ./uhdm-integration/.github/ci.sh
        set -o pipefail
        timeout 5m ./uhdm-integration/build/lowrisc_dv_chip_verilator_sim_0.1/sim-verilator/Vchip_sim_tb --meminit=rom,uhdm-tests/opentitan/opentitan_current_sw/boot_rom_sim_verilator.scr.39.vmem --meminit=otp,uhdm-tests/opentitan/opentitan_current_sw/otp_img_sim_verilator.vmem --meminit=flash,uhdm-tests/opentitan/opentitan_current_sw/otbn_smoketest_sim_verilator.elf | tee output_uhdm_vanilla_verilator/vanilla_verilator_simulation.log
        cp uart0.log output_uhdm_vanilla_verilator/vanilla_verilator_uart.log
        cp trace_core_00000000.log output_uhdm_vanilla_verilator/vanilla_verilator_trace.log
      env:
        TARGET: verilator/opentitan
        TEST_CASE: tests/opentitan

    - name: Compare results
      run: |
        diff output_uhdm_vanilla_verilator/vanilla_verilator_uart.log output_uhdm_vanilla_verilator/uhdm_verilator_uart.log

    - uses: actions/upload-artifact@v2
      with:
        name: opentitan-earl-grey-simulation-output
        path: output_uhdm_vanilla_verilator

  opentitan-earlgrey-210214:
    runs-on: ubuntu-latest
    needs: build-binaries
    env:
      CC: gcc-9
      CXX: g++-9

    steps:

    - name: Install dependencies
      run: |
        sudo apt-get update -qq
        sudo apt install -y g++-9 build-essential cmake tclsh ant default-jre swig google-perftools libgoogle-perftools-dev python3 python3-dev uuid uuid-dev tcl-dev flex libfl-dev libelf-dev ninja-build

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - uses: actions/setup-python@v2
      with:
         python-version: '3.7'

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    # See https://github.com/actions/upload-artifact/issues/38
    - name: Extract
      run: tar -xf binaries.tar

    - name: Prepare output directory
      run: mkdir output_uhdm_vanilla_verilator

    - name: Build & Test (uhdm verilator)
      run: |
        pip install virtualenv
        ./uhdm-integration/.github/ci.sh
        set -o pipefail
        timeout 5m ./uhdm-integration/build/lowrisc_systems_top_earlgrey_verilator_0.1/sim-verilator/Vtop_earlgrey_verilator --meminit=rom,uhdm-tests/opentitan/opentitan_210214_sw/boot_rom_sim_verilator.elf --meminit=flash,uhdm-tests/opentitan/opentitan_210214_sw/hello_world_sim_verilator.elf | tee output_uhdm_vanilla_verilator/uhdm_verilator_simulation.log
        cp uart0.log output_uhdm_vanilla_verilator/uhdm_verilator_uart.log
        cp trace_core_00000000.log output_uhdm_vanilla_verilator/uhdm_verilator_trace.log
      env:
        OPENTITAN_VERSION: opentitan-210214
        TOP_TARGET_NAME: systems_top_earlgrey_verilator
        TOP_MODULE_NAME: top_earlgrey_verilator
        FUSESOC_SETUP_TARGET: lowrisc:systems:top_earlgrey_verilator
        TARGET: uhdm/verilator/opentitan
        TEST_CASE: tests/opentitan

    - name: Build & Test (vanilla verilator)
      run: |
        pip install virtualenv
        ./uhdm-integration/.github/ci.sh
        set -o pipefail
        timeout 5m ./uhdm-integration/build/lowrisc_systems_top_earlgrey_verilator_0.1/sim-verilator/Vtop_earlgrey_verilator --meminit=rom,uhdm-tests/opentitan/opentitan_210214_sw/boot_rom_sim_verilator.elf --meminit=flash,uhdm-tests/opentitan/opentitan_210214_sw/hello_world_sim_verilator.elf | tee output_uhdm_vanilla_verilator/vanilla_verilator_simulation.log
        cp uart0.log output_uhdm_vanilla_verilator/vanilla_verilator_uart.log
        cp trace_core_00000000.log output_uhdm_vanilla_verilator/vanilla_verilator_trace.log
      env:
        OPENTITAN_VERSION: opentitan-210214
        TOP_TARGET_NAME: systems_top_earlgrey_verilator
        TOP_MODULE_NAME: top_earlgrey_verilator
        FUSESOC_SETUP_TARGET: lowrisc:systems:top_earlgrey_verilator
        TARGET: verilator/opentitan
        TEST_CASE: tests/opentitan

    - name: Compare results
      run: |
        diff output_uhdm_vanilla_verilator/vanilla_verilator_uart.log output_uhdm_vanilla_verilator/uhdm_verilator_uart.log

    - uses: actions/upload-artifact@v2
      with:
        name: opentitan-earlgrey-210214-simulation-output
        path: output_uhdm_vanilla_verilator

  simple-system-sim:
    runs-on: ubuntu-latest
    needs: build-binaries
    env:
      CC: gcc-9
      CXX: g++-9

    steps:

    - name: Install dependencies
      run: |
        sudo apt-get update -qq
        sudo apt install -y g++-9 build-essential cmake tclsh ant default-jre swig google-perftools libgoogle-perftools-dev python3 python3-dev uuid uuid-dev tcl-dev flex libfl-dev libelf-dev

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - uses: actions/setup-python@v2
      with:
         python-version: '3.7'

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    # See https://github.com/actions/upload-artifact/issues/38
    - name: Extract
      run: tar -xf binaries.tar

    - name: Build & Test (uhdm verilator)
      run: |
        pip install virtualenv
        ./uhdm-integration/.github/ci.sh
        timeout 5m ./uhdm-integration/build/lowrisc_ibex_ibex_simple_system_0/sim-verilator/Vibex_simple_system --meminit=ram,uhdm-tests/ibex/hello_test.elf
        mkdir output_uhdm
        cp ibex_simple_system.log ibex_simple_system_pcount.csv trace_core_00000000.log output_uhdm/
      env:
        TARGET: uhdm/verilator/simple-system
        TEST_CASE: tests/ibex

    - name: Build & Test (vanilla verilator)
      run: |
        ./uhdm-integration/.github/ci.sh
        timeout 5m ./uhdm-integration/build/lowrisc_ibex_ibex_simple_system_0/sim-verilator/Vibex_simple_system --meminit=ram,uhdm-tests/ibex/hello_test.elf
        diff -y ibex_simple_system.log output_uhdm/ibex_simple_system.log
      env:
        TARGET: verilator/simple-system
        TEST_CASE: tests/ibex

    - uses: actions/upload-artifact@v2
      with:
        name: simple-system-simulation-output
        path: output_uhdm

  generate-matrix-vcddiff:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix-vcddiff.outputs.matrix }}
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 1

      - uses: actions/setup-python@v2
        with:
           python-version: '3.7'

      - name: Generate matrix (vcddiff)
        id: generate-matrix-vcddiff
        run: |
          matrix="$(cd uhdm-integration && python list.py -d tests -s cmake ibex synthesis swerv OneClass hello-uvm OneThis array-copy assignment-pattern MultiplePrints OneNetInterf OneNetRange StreamOp opentitan hier_path genscope_cells DpiChandle ArrayInit PutC conditional_if_else conditional_if CellNamedLikeModule ConstSizes PackageCast TypedefAlias 2DFunctionArg 2DUnpackedArray FunctionColonReference IndexedPartSelectOfMember PkgParamAsFunctionArg ParameterColonReference TypedefEnum xor_assignment CastLogic CastSize CastExpression CastStruct CastStructArray PartSelectOfMember EnumConcatenatedConst ReturnFunctionCall FunctionWithoutReturn VoidFunction 1DUnpackedArray LogicPackedArray ParameterPackedArray ParameterUnpackedArray ParameterUnpackedLogicArray UnpackedArray ImportFunction ImportPackageWithFunction ImportedFunctionCallInModuleAndSubmodule ParameterConditionalAssignment StructMemberAsModuleInput TypedefAliasInPackage TypedefPackedDimensions TypedefVariableDimensions VarInFor EmptyTask Function2Returns FunctionExportDPI FunctionOutputArgument TaskExportDPI TaskImportDPI TaskOutputArgument TaskReturn VoidFunction2Returns VoidFunctionWithoutReturn AssignmentToConcatenation DeclarationInFor TypedefInModule AssignTypedefedFunctionCall TypedefedFunctionArgument TypedefedFunctionReturn TypedefedRangedFunctionArgument TypedefedRangedFunctionReturn PatternDefault PatternIndexes PatternReplication PatternStruct StructParameter TypedefInModulePort TypedefWithParameter SelectFromUnpackedInFunction UnsizedConstant ParameterSizeOfInstance PatternAsParameterOfInstance ParameterPackedArraySurelogSubstitution UnsizedConstantParameter UnsizedConstantParameterInInstance ExpressionInIndex LocalParamInNestedForLoops NestedForLoops SumOfParametersInNestedForLoops CastWidthFromPackage BitsCallOnExpression BitsCallOnType BitsCallOnVar OneImport fsm_using_always OnePackage fsm_single_always OneCast fsm_using_function cs_registers EnumArray EnumArrayListedElements UnitForLoop VarSelect FunctionParam StructOfArrayOfStructs PatternAsFunctionArgument PatternInFunction PatternType AdditionAsParameterInInstance NegationOfPatternParameter NestedParamSubstitution NegationOfPatternParameterInInstance NegationOfParameterInInstance unary_op_plus unary_op_not_log unary_op_minus BitsCallOnStructMember ParameterFromPkgInNestedModule ParameterFromPkgOnParameterPortList InterfaceAsPort InterfaceAsPortAssignValueInSubmodule InterfaceParameter InterfaceParameterSetValue InterfaceVariable InterfaceWithPort UnsizedConstantsParsing UnsizedConstantsParameterParsing LocalParamSelect StructLocalParam 2DeclarationsInFor BindModule InterfaceAssign InterfaceInitial TypedefOnFileLevel Shortint Shortreal AnonymousUnion BindModuleWithInputPorts ModuleAlways 2DParameterOfInstance GetC PatternParameterInSubmodule Repeat Forever Continue EnumFirst EnumFirstInInitial Fork ForkJoinTypes InterfaceAlways GenScopeFunction ReplicationPassedToInstance CastInFunctionInGenBlock FunctionReturnEnum NegationAsParameterOfInstance Disable MultiAssignmentPatternOfConcat EnumConstX AssignmentToConcatenationWithSelect BitSelectPartSelectInFunction FunctionOnDesignLevel PartSelectOfPartSelectedBitSelect)"
          echo "::set-output name=matrix::$matrix"
          echo "matrix vcddiff: $matrix"

  tests-vcddiff:
    runs-on: ubuntu-latest
    needs: [build-binaries, generate-matrix-vcddiff]
    strategy:
      matrix:
        TEST_CASE_VCDDIFF: ${{ fromJson(needs.generate-matrix-vcddiff.outputs.matrix) }}
      fail-fast:
        false
    env:
      CC: gcc-9
      CXX: g++-9
      GIT_HTTP_LOW_SPEED_LIMIT: 1
      GIT_HTTP_LOW_SPEED_TIME: 600

    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update -qq
        sudo apt install -y g++-9 build-essential cmake tclsh ant default-jre swig google-perftools libgoogle-perftools-dev python3 python3-dev uuid uuid-dev tcl-dev flex libfl-dev

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - uses: actions/setup-python@v2
      with:
         python-version: '3.7'

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    # See https://github.com/actions/upload-artifact/issues/38
    - name: Extract
      run: |
        tar -xf binaries.tar

    - name: 'Download artifact'
      uses: actions/github-script@v3.1.0
      with:
        script: |
          var TESTNAME = process.env.TEST_CASE.substring(6) + ".sv"
          console.log("==> TESTNAME:", TESTNAME)
          console.log("==> OWNER:", process.env.OWNER)
          console.log("==> REPO:", process.env.REPO)
          console.log("==> WORKFLOW:", process.env.WORKFLOW)
          console.log("==> BRANCH:", process.env.BRANCH)
          console.log("==> STATUS:", process.env.STATUS)
          var runID
          const endpoint = "GET /repos/:owner/:repo/actions/workflows/:id/runs?status=:status"
          const params = {
            owner: process.env.OWNER,
            repo: process.env.REPO,
            id: process.env.WORKFLOW,
            branch: process.env.BRANCH,
            status: process.env.STATUS,
          }
          for await (const runs of github.paginate.iterator(endpoint, params)) {
            const run = runs.data.find(r => {
              return true
            })

            if (run) {
              runID = run.id
              break
            }
          }

          console.log("==> RunID:", runID)
          var artifacts = await github.actions.listWorkflowRunArtifacts({
            owner: process.env.OWNER,
            repo: process.env.REPO,
            run_id: runID,
            per_page: 100,
          });
          var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
            return !artifact.name.localeCompare(TESTNAME)
          })[0];
          var download = await github.actions.downloadArtifact({
            owner: process.env.OWNER,
            repo: process.env.REPO,
            artifact_id: matchArtifact.id,
            archive_format: 'zip',
          });
          var fs = require('fs');
          fs.writeFileSync("${{github.workspace}}/artifact.zip", Buffer.from(download.data));
      env:
        TEST_CASE: ${{ matrix.TEST_CASE_VCDDIFF }}
        OWNER: antmicro
        REPO: yosys-uhdm-plugin-integration
        WORKFLOW: main.yml
        BRANCH: master
        STATUS: success

    - run: |
        unzip artifact.zip -d uhdm-integration/build

    - name: Generate vcd dump (Yosys)
      run: |
        ./uhdm-integration/.github/ci.sh
      env:
        TEST_CASE: ${{ matrix.TEST_CASE_VCDDIFF }}
        TARGET: uhdm/yosys/verilate-ast

    - name: Generate vcd dump (verilator)
      run: ./uhdm-integration/.github/ci.sh
      env:
        TEST_CASE: ${{ matrix.TEST_CASE_VCDDIFF }}
        TARGET: uhdm/verilator/test-ast

    - name: Compare vcd dumps (vcddiff)
      run: ./uhdm-integration/.github/ci.sh
      env:
        TEST_CASE: ${{ matrix.TEST_CASE_VCDDIFF }}
        TARGET: uhdm/vcddiff

