name: 'main'

on:
  push:
    branches:
      - uhdm-verilator
  pull_request:

jobs:

  build-binaries:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:latest
    env:
      CC: gcc-9
      CXX: g++-9
      CCACHE_DIR: "/root/verilator/verilator/.cache/"

    steps:

    - name: Install dependencies
      run: |
        apt-get update -qq
        apt install -y g++-9 build-essential cmake tclsh ant default-jre swig google-perftools libgoogle-perftools-dev python3 python3-dev uuid uuid-dev tcl-dev flex libfl-dev python3 git pkg-config libreadline-dev bison libffi-dev wget autoconf ccache
        update-alternatives --install /usr/bin/python python /usr/bin/python3 1

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Create Cache Timestamp
      id: cache_timestamp
      uses: nanzm/get-time-action@v1.1
      with:
        format: 'YYYY-MM-DD-HH-mm-ss'

    - name: Setup cache
      uses: actions/cache@v2
      with:
        path: ${{ env.CCACHE_DIR }}
        key: cache_linux_${{ steps.cache_timestamp.outputs.time }}
        restore-keys: cache_linux_

    - name: Build binaries
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        ./build_binaries.sh
        # By default actions/upload-artifact@v2 do not preserve file permissions
        # tar directory to workaround this issue
        # See https://github.com/actions/upload-artifact/issues/38
        tar -cvf binaries.tar image

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        name: binaries
        path: |
          binaries.tar
          **/plot_*.svg

  build-macos:
    runs-on: macos-latest
    env:
      CCACHE_DIR: "/Users/runner/work/verilator/verilator/.cache/"

    steps:
    - name: Install dependencies
      run: |
        brew install --HEAD ccache

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - uses: actions/setup-python@v2
      with:
         python-version: '3.7'

    - name: Create Cache Timestamp
      id: cache_timestamp
      uses: nanzm/get-time-action@v1.1
      with:
        format: 'YYYY-MM-DD-HH-mm-ss'

    - name: Setup cache
      uses: actions/cache@v2
      with:
        path: ${{ env.CCACHE_DIR }}
        key: cache_macos_${{ steps.cache_timestamp.outputs.time }}
        restore-keys: cache_macos_

    - name: Build binaries
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        export CPU_COUNT=`sysctl -n hw.logicalcpu`
        ./build_binaries.sh

    - name: Run MultipleCells test
      run: ./uhdm-integration/.github/ci.sh
      env:
        TEST_CASE: tests/cmake/MultipleCells
        TARGET: uhdm/verilator/test-cmake

  generate-matrix:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:latest
    outputs:
      matrix1: ${{ steps.generate-matrix-part-1.outputs.matrix }}
      matrix2: ${{ steps.generate-matrix-part-2.outputs.matrix }}
    steps:
      - name: Install dependencies
        run: |
          apt-get update -qq
          apt install -y python3
          update-alternatives --install /usr/bin/python python /usr/bin/python3 1

      - name: Checkout master
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Generate matrix - part 1
        id: generate-matrix-part-1
        run: |
          matrix="$(cd uhdm-integration && python list.py --part 1 -d tests -s cmake ibex synthesis serv swerv OneClass hello-uvm OneThis opentitan CastStructArray StringAssignment)"
          echo "::set-output name=matrix::$matrix"
          echo "Matrix: $matrix"

      - name: Generate matrix - part 2
        id: generate-matrix-part-2
        run: |
          matrix="$(cd uhdm-integration && python list.py --part 2 -d tests -s cmake ibex synthesis serv swerv OneClass hello-uvm OneThis opentitan CastStructArray StringAssignment)"
          echo "::set-output name=matrix::$matrix"
          echo "Matrix: $matrix"

  generate-ibex-modules:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:latest
    outputs:
      matrix: ${{ steps.generate-ibex-modules.outputs.matrix }}
    steps:
      - name: Install dependencies
        run: |
          apt-get update -qq
          apt install -y python3
          update-alternatives --install /usr/bin/python python /usr/bin/python3 1

      - name: Checkout master
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Generate matrix
        id: generate-ibex-modules
        run: |
          matrix="$(cd uhdm-integration && python list.py -d tests/ibex/module_tests)"
          echo "::set-output name=matrix::$matrix"
          echo "Matrix: $matrix"

  tests-part-1:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:latest
    needs: [build-binaries, generate-matrix]
    strategy:
      matrix:
        TEST_CASE: ${{ fromJson(needs.generate-matrix.outputs.matrix1) }}
      fail-fast:
        false
    env:
      CC: gcc-9
      CXX: g++-9
      GIT_HTTP_LOW_SPEED_LIMIT: 1
      GIT_HTTP_LOW_SPEED_TIME: 600
      TARGET: uhdm/verilator/test-ast

    steps:

    - name: Install dependencies
      run: |
        apt-get update -qq
        apt install -y g++-9 build-essential python3 google-perftools ccache
        update-alternatives --install /usr/bin/python python /usr/bin/python3 1

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    # See https://github.com/actions/upload-artifact/issues/38
    - name: Extract
      run: tar -xf binaries.tar

    - name: Build & Test
      run: ./uhdm-integration/.github/ci.sh
      env:
        TEST_CASE: ${{ matrix.TEST_CASE }}

  tests-part-2:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:latest
    needs: [build-binaries, generate-matrix]
    strategy:
      matrix:
        TEST_CASE: ${{ fromJson(needs.generate-matrix.outputs.matrix2) }}
      fail-fast:
        false
    env:
      CC: gcc-9
      CXX: g++-9
      GIT_HTTP_LOW_SPEED_LIMIT: 1
      GIT_HTTP_LOW_SPEED_TIME: 600
      TARGET: uhdm/verilator/test-ast

    steps:

    - name: Install dependencies
      run: |
        apt-get update -qq
        apt install -y g++-9 build-essential python3 google-perftools ccache
        update-alternatives --install /usr/bin/python python /usr/bin/python3 1

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    # See https://github.com/actions/upload-artifact/issues/38
    - name: Extract
      run: tar -xf binaries.tar

    - name: Build & Test
      run: ./uhdm-integration/.github/ci.sh
      env:
        TEST_CASE: ${{ matrix.TEST_CASE }}

  ibex-module-tests:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:latest
    needs: [build-binaries, generate-ibex-modules]
    strategy:
      matrix:
        TEST_CASE: ${{ fromJson(needs.generate-ibex-modules.outputs.matrix) }}
        TARGET:
          - uhdm/verilator/test-ast
      fail-fast:
        false
    env:
      CC: gcc-9
      CXX: g++-9
      GIT_HTTP_LOW_SPEED_LIMIT: 1
      GIT_HTTP_LOW_SPEED_TIME: 600

    steps:

    - name: Install dependencies
      run: |
        apt-get update -qq
        apt install -y g++-9 build-essential python3 python3-pip google-perftools git ccache
        update-alternatives --install /usr/bin/python python /usr/bin/python3 1
        update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    # See https://github.com/actions/upload-artifact/issues/38
    - name: Extract
      run: tar -xf binaries.tar

    - name: Build & Test
      run: |
        pip install virtualenv
        virtualenv venv-ibex
        . venv-ibex/bin/activate
        pip install -r uhdm-tests/ibex/ibex/python-requirements.txt
        cd uhdm-tests/ibex/ibex
        fusesoc --cores-root=. run --target=synth --setup lowrisc:ibex:top_artya7 --part xc7a35ticsg324-1L
        fusesoc --cores-root=. run --target=sim --setup lowrisc:ibex:ibex_simple_system --RV32E=0 --RV32M=ibex_pkg::RV32MFast
        cd ../../..
        ./uhdm-integration/.github/ci.sh
      env:
        TEST_CASE: ${{ matrix.TEST_CASE }}
        TARGET: ${{ matrix.TARGET }}

  generate-opentitan-current-modules:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:latest
    outputs:
      matrix: ${{ steps.generate-opentitan-current-modules.outputs.matrix }}
    steps:
      - name: Install dependencies
        run: |
          apt-get update -qq
          apt install -y python3
          update-alternatives --install /usr/bin/python python /usr/bin/python3 1

      - name: Checkout master
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Generate matrix
        id: generate-opentitan-current-modules
        run: |
          matrix="$(cd uhdm-integration && python list.py -d tests/opentitan/opentitan-current/module_tests -s lc_ctrl_fsm pinmux)"
          echo "::set-output name=matrix::$matrix"
          echo "Matrix: $matrix"

  opentitan-current-module-tests:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:latest
    needs: [build-binaries, generate-opentitan-current-modules]
    strategy:
      matrix:
        TEST_CASE: ${{ fromJson(needs.generate-opentitan-current-modules.outputs.matrix) }}
        TARGET:
          - uhdm/verilator/test-ast
      fail-fast:
        false
    env:
      CC: gcc-9
      CXX: g++-9
      GIT_HTTP_LOW_SPEED_LIMIT: 1
      GIT_HTTP_LOW_SPEED_TIME: 600

    steps:

    - name: Install dependencies
      run: |
        apt-get update -qq
        apt install -y g++-9 build-essential python3 python3-pip google-perftools git ccache
        update-alternatives --install /usr/bin/python python /usr/bin/python3 1
        update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    # See https://github.com/actions/upload-artifact/issues/38
    - name: Extract
      run: tar -xf binaries.tar

    - name: Build & Test
      run: |
        pip install virtualenv
        virtualenv venv-opentitan
        . venv-opentitan/bin/activate
        pip install -r uhdm-tests/opentitan/opentitan-current/python-requirements.txt
        cd uhdm-tests/opentitan/opentitan-current
        fusesoc --cores-root=. run --flag=fileset_top --target=sim --setup lowrisc:dv:chip_verilator_sim
        cd ../../..
        ./uhdm-integration/.github/ci.sh
      env:
        TEST_CASE: ${{ matrix.TEST_CASE }}
        TARGET: ${{ matrix.TARGET }}

  generate-opentitan-210214-modules:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:latest
    outputs:
      matrix: ${{ steps.generate-opentitan-210214-modules.outputs.matrix }}
    steps:
      - name: Install dependencies
        run: |
          apt-get update -qq
          apt install -y python3
          update-alternatives --install /usr/bin/python python /usr/bin/python3 1

      - name: Checkout master
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Generate matrix
        id: generate-opentitan-210214-modules
        run: |
          matrix="$(cd uhdm-integration && python list.py -d tests/opentitan/opentitan-210214/module_tests)"
          echo "::set-output name=matrix::$matrix"
          echo "Matrix: $matrix"

  opentitan-210214-module-tests:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:latest
    needs: [build-binaries, generate-opentitan-210214-modules]
    strategy:
      matrix:
        TEST_CASE: ${{ fromJson(needs.generate-opentitan-210214-modules.outputs.matrix) }}
        TARGET:
          - uhdm/verilator/test-ast
      fail-fast:
        false
    env:
      CC: gcc-9
      CXX: g++-9
      GIT_HTTP_LOW_SPEED_LIMIT: 1
      GIT_HTTP_LOW_SPEED_TIME: 600

    steps:

    - name: Install dependencies
      run: |
        apt-get update -qq
        apt install -y g++-9 build-essential python3 python3-pip google-perftools git ccache
        update-alternatives --install /usr/bin/python python /usr/bin/python3 1
        update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    # See https://github.com/actions/upload-artifact/issues/38
    - name: Extract
      run: tar -xf binaries.tar

    - name: Build & Test
      run: |
        pip install virtualenv
        virtualenv venv-opentitan
        . venv-opentitan/bin/activate
        pip install -r uhdm-tests/opentitan/opentitan-210214/python-requirements.txt
        cd uhdm-tests/opentitan/opentitan-210214
        fusesoc --cores-root=. run --flag=fileset_top --target=sim --setup lowrisc:systems:top_earlgrey_verilator
        cd ../../..
        ./uhdm-integration/.github/ci.sh
      env:
        OPENTITAN_VERSION: opentitan-210214
        TOP_TARGET_NAME: systems_top_earlgrey_verilator
        TEST_CASE: ${{ matrix.TEST_CASE }}
        TARGET: ${{ matrix.TARGET }}

  opentitan-earlgrey-current:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:latest
    needs: build-binaries
    env:
      CC: gcc-9
      CXX: g++-9

    steps:

    - name: Install dependencies
      run: |
        apt-get update -qq
        apt install -y g++-9 build-essential python3 python3-pip google-perftools libelf-dev ninja-build git ccache
        update-alternatives --install /usr/bin/python python /usr/bin/python3 1
        update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    # See https://github.com/actions/upload-artifact/issues/38
    - name: Extract
      run: tar -xf binaries.tar

    - name: Prepare output directory
      run: mkdir output_uhdm_vanilla_verilator

    - name: Build & Test (uhdm verilator)
      run: |
        pip install virtualenv
        ./uhdm-integration/.github/ci.sh
        set -o pipefail
        timeout 5m ./uhdm-integration/build/lowrisc_dv_chip_verilator_sim_0.1/sim-verilator/Vchip_sim_tb --meminit=rom,uhdm-tests/opentitan/opentitan_current_sw/boot_rom_sim_verilator.scr.39.vmem --meminit=otp,uhdm-tests/opentitan/opentitan_current_sw/otp_img_sim_verilator.vmem --meminit=flash,uhdm-tests/opentitan/opentitan_current_sw/otbn_smoketest_sim_verilator.elf | tee output_uhdm_vanilla_verilator/uhdm_verilator_simulation.log
        cp uart0.log output_uhdm_vanilla_verilator/uhdm_verilator_uart.log
        cp trace_core_00000000.log output_uhdm_vanilla_verilator/uhdm_verilator_trace.log
      env:
        TARGET: uhdm/verilator/opentitan
        TEST_CASE: tests/opentitan/opentitan-current

    - name: Build & Test (vanilla verilator)
      run: |
        pip install virtualenv
        ./uhdm-integration/.github/ci.sh
        set -o pipefail
        timeout 5m ./uhdm-integration/build/lowrisc_dv_chip_verilator_sim_0.1/sim-verilator/Vchip_sim_tb --meminit=rom,uhdm-tests/opentitan/opentitan_current_sw/boot_rom_sim_verilator.scr.39.vmem --meminit=otp,uhdm-tests/opentitan/opentitan_current_sw/otp_img_sim_verilator.vmem --meminit=flash,uhdm-tests/opentitan/opentitan_current_sw/otbn_smoketest_sim_verilator.elf | tee output_uhdm_vanilla_verilator/vanilla_verilator_simulation.log
        cp uart0.log output_uhdm_vanilla_verilator/vanilla_verilator_uart.log
        cp trace_core_00000000.log output_uhdm_vanilla_verilator/vanilla_verilator_trace.log
      env:
        TARGET: verilator/opentitan
        TEST_CASE: tests/opentitan/opentitan-current

    - name: Compare results
      run: |
        diff output_uhdm_vanilla_verilator/vanilla_verilator_uart.log output_uhdm_vanilla_verilator/uhdm_verilator_uart.log

    - uses: actions/upload-artifact@v2
      with:
        name: opentitan-earl-grey-simulation-output
        path: |
          output_uhdm_vanilla_verilator
          **/plot_*.svg

  opentitan-earlgrey-210214:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:latest
    needs: build-binaries
    env:
      CC: gcc-9
      CXX: g++-9

    steps:

    - name: Install dependencies
      run: |
        apt-get update -qq
        apt install -y g++-9 build-essential python3 python3-pip google-perftools libelf-dev ninja-build git ccache
        update-alternatives --install /usr/bin/python python /usr/bin/python3 1
        update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    # See https://github.com/actions/upload-artifact/issues/38
    - name: Extract
      run: tar -xf binaries.tar

    - name: Prepare output directory
      run: mkdir output_uhdm_vanilla_verilator

    - name: Build & Test (uhdm verilator)
      run: |
        pip install virtualenv
        ./uhdm-integration/.github/ci.sh
        set -o pipefail
        timeout 5m ./uhdm-integration/build/lowrisc_systems_top_earlgrey_verilator_0.1/sim-verilator/Vtop_earlgrey_verilator --meminit=rom,uhdm-tests/opentitan/opentitan_210214_sw/boot_rom_sim_verilator.elf --meminit=flash,uhdm-tests/opentitan/opentitan_210214_sw/hello_world_sim_verilator.elf | tee output_uhdm_vanilla_verilator/uhdm_verilator_simulation.log
        cp uart0.log output_uhdm_vanilla_verilator/uhdm_verilator_uart.log
        cp trace_core_00000000.log output_uhdm_vanilla_verilator/uhdm_verilator_trace.log
      env:
        TARGET: uhdm/verilator/opentitan
        TEST_CASE: tests/opentitan/opentitan-210214

    - name: Build & Test (vanilla verilator)
      run: |
        pip install virtualenv
        ./uhdm-integration/.github/ci.sh
        set -o pipefail
        timeout 5m ./uhdm-integration/build/lowrisc_systems_top_earlgrey_verilator_0.1/sim-verilator/Vtop_earlgrey_verilator --meminit=rom,uhdm-tests/opentitan/opentitan_210214_sw/boot_rom_sim_verilator.elf --meminit=flash,uhdm-tests/opentitan/opentitan_210214_sw/hello_world_sim_verilator.elf | tee output_uhdm_vanilla_verilator/vanilla_verilator_simulation.log
        cp uart0.log output_uhdm_vanilla_verilator/vanilla_verilator_uart.log
        cp trace_core_00000000.log output_uhdm_vanilla_verilator/vanilla_verilator_trace.log
      env:
        TARGET: verilator/opentitan
        TEST_CASE: tests/opentitan/opentitan-210214

    - name: Compare results
      run: |
        diff output_uhdm_vanilla_verilator/vanilla_verilator_uart.log output_uhdm_vanilla_verilator/uhdm_verilator_uart.log

    - uses: actions/upload-artifact@v2
      with:
        name: opentitan-earlgrey-210214-simulation-output
        path: |
          output_uhdm_vanilla_verilator
          **/plot_*.svg

  simple-system-sim:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:latest
    needs: build-binaries
    env:
      CC: gcc-9
      CXX: g++-9

    steps:

    - name: Install dependencies
      run: |
        apt-get update -qq
        apt install -y g++-9 build-essential python3 python3-pip google-perftools libelf-dev ninja-build git ccache
        update-alternatives --install /usr/bin/python python /usr/bin/python3 1
        update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    # See https://github.com/actions/upload-artifact/issues/38
    - name: Extract
      run: tar -xf binaries.tar

    - name: Build & Test (uhdm verilator)
      run: |
        pip install virtualenv
        ./uhdm-integration/.github/ci.sh
        timeout 5m ./uhdm-integration/build/lowrisc_ibex_ibex_simple_system_0/sim-verilator/Vibex_simple_system --meminit=ram,uhdm-tests/ibex/hello_test.elf
        mkdir output_uhdm
        cp ibex_simple_system.log ibex_simple_system_pcount.csv trace_core_00000000.log output_uhdm/
      env:
        TARGET: uhdm/verilator/simple-system
        TEST_CASE: tests/ibex

    - name: Build & Test (vanilla verilator)
      run: |
        ./uhdm-integration/.github/ci.sh
        timeout 5m ./uhdm-integration/build/lowrisc_ibex_ibex_simple_system_0/sim-verilator/Vibex_simple_system --meminit=ram,uhdm-tests/ibex/hello_test.elf
        diff -y ibex_simple_system.log output_uhdm/ibex_simple_system.log
      env:
        TARGET: verilator/simple-system
        TEST_CASE: tests/ibex

    - uses: actions/upload-artifact@v2
      with:
        name: simple-system-simulation-output
        path: |
          output_uhdm
          **/plot_*.svg

  servant-soc-sim:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:latest
    needs: build-binaries
    env:
      CC: gcc-9
      CXX: g++-9

    steps:

    - name: Install dependencies
      run: |
        apt-get update -qq
        apt install -y g++-9 build-essential python3 python3-pip google-perftools libelf-dev ninja-build git ccache
        update-alternatives --install /usr/bin/python python /usr/bin/python3 1
        update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    # See https://github.com/actions/upload-artifact/issues/38
    - name: Extract
      run: tar -xf binaries.tar

    - name: Build & Test (uhdm verilator)
      run: |
        pip install virtualenv
        ./uhdm-integration/.github/ci.sh
      env:
        TARGET: uhdm/verilator/servant/run
        TEST_CASE: tests/serv

  generate-matrix-vcddiff:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:latest
    outputs:
      matrix: ${{ steps.generate-matrix-vcddiff.outputs.matrix }}
    steps:
      - name: Install dependencies
        run: |
          apt-get update -qq
          apt install -y python3
          update-alternatives --install /usr/bin/python python /usr/bin/python3 1

      - name: Checkout master
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Generate matrix (vcddiff)
        id: generate-matrix-vcddiff
        run: |
          matrix="$(cd uhdm-integration && python list.py -d tests -s ibex swerv synthesis opentitan hello-uvm assignment-pattern Forever BitsCallOnType OneClass Continue AnonymousUnion FunctionOnDesignLevel ParameterUnpackedArray VoidFunction2Returns PatternStruct ImportedFunctionCallInModuleAndSubmodule VoidFunctionWithoutReturn cmake PutC OneThis CastInFunctionInGenBlock PatternType FunctionOutputArgument GetC ForkJoinTypes EnumFirstInInitial ImportFunction DpiChandle Disable EnumFirst TypedefOnFileLevel UnsizedConstantsParameterParsing Fork PatternInFunction TypedefVariableDimensions ParameterUnpackedLogicArray SelectFromUnpackedInFunction PatternReplication VoidFunction MultiplePrints BitSelectPartSelectInFunction ImportPackageWithFunction ParameterPackedArray StringAssignment SystemFunctions 2DFunctionArg ArrayInit array-copy FunctionColonReference ParameterColonReference ParameterSizeOfInstance PkgParamAsFunctionArg xor_assignment fsm_using_always OneNetInterf cs_registers UnpackedArray InterfaceAssign fsm_using_function OneNetRange ParameterWithUnderscoreValueDividedPassedFromCommandLine FunctionExportDPI OnePackage InterfaceInitial InterfaceAlways OneCast fsm_single_always TaskExportDPI OneImport hier_path CastStructArray InterfaceAsPort ParameterInitializedByPartSelectOfParameters ParameterInitializedByPartSelectOfParametersAssignedToVar StringAssignment EnumParameterInNestedModules 2DeclarationsInFor 1DUnpackedArray 2DUnpackedArray ArraySize AssignBitsCallToSubmoduleParameter DeclarationInFor EnumArrayListedElements EnumArray DivisionOfSize ImportedPackageEnumItemInInterface InterfaceVariable ConstSizes InterfaceParameterSetValue InterfaceWithPort InterfaceAsPortAssignValueInSubmodule InterfaceParameter LogicPackedArray NestedParamSubstitution MultiAssignmentPatternOfConcat MixedPatterns NegationOfPatternParameterInInstance OneArithShift ParameterPackedArraySurelogSubstitution PatternDefault PatternAsParameterOfInstance Repeat Shortreal TypedefedRangedFunctionArgument RealValue TaskImportDPI TaskOutputArgument TypedefAliasInPackage PartSelectOfPartSelectedBitSelect TaskReturn PatternAsFunctionArgument PatternIndexes ReturnEnumArray unary_op_minus TypedefPackedDimensions unary_op_plus UnsizedConstantParameter unary_op_not_log UnsizedConstantParameterInInstance UnsizedConstantsParsing UnsizedConstant FunctionWithOverriddenParameter ImportedDoubleCastedParameter ImportedEnumCast ParameterInitializationWithNegation StringAssignConcatenation StringLocalParamInitByConcatenation StructParameterInitializedWithPatternAndReferenced StringWithBackslash serv-minimal serv conditional_if AssignSumOfConstants AssignSumOfConstantsInSubmodule AssignSumWithParameter AssignSumWithParameterInSubmodule CastClog2 CastClog2ToMinimalSizeOfParamValue CastClog2ToMinimalSizeOfParamValueFromCommandLine CastToSumOfConstants CastToSumWithParameterInSubmodule Clog2OfSumWithParameterIn2InstancesOfSubmodule OutputSizeWithParameterOfInstanceInitializedByStructMember ParameterInGenScopeInitializedWithLongConstant ImportedParameter ImportTypeOfPort ImportParametrizedTypeAndDeclareParamWithTheSameName ParameterPassedToSubmoduleOfSubmodule ParameterPassedTo3TimesNestedSubmodule ParameterPassedToSubmoduleInGenscopeOfSubmodule ParameterInitializedInTopOf5LevelHierarchy ParameterInitializedInSubModuleOfTopOf5LevelHierarchy ParameterInitializedInTopOf5LevelHierarchyWithUnusedParamInTheMiddle ParameterInitializedInTopOf5LevelHierarchyWithUnusedParamOfDifferentTypeInTheMiddle IndexedPartSelectOfArrayElement CastInFunctionToParameterWidth CastToSumWithParameterIn2InstancesOfSubmodule ClogOfParamOfInstanceInitializedByStructMember MemberSelectOf2DStructPackedArray SelectOnMemberSelectedFrom2DArray SubmoduleInGenScopeWithGenScopeParametrizedByParameterFromTopModule TypedefStructArray VarPassedTo2Submodules FunctionParam MultipleAssignments NegationOfPatternParameter)"
          echo "::set-output name=matrix::$matrix"
          echo "matrix vcddiff: $matrix"

  tests-vcddiff:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:latest
    needs: [build-binaries, generate-matrix-vcddiff]
    strategy:
      matrix:
        TEST_CASE_VCDDIFF: ${{ fromJson(needs.generate-matrix-vcddiff.outputs.matrix) }}
      fail-fast:
        false
    env:
      CC: gcc-9
      CXX: g++-9
      GIT_HTTP_LOW_SPEED_LIMIT: 1
      GIT_HTTP_LOW_SPEED_TIME: 600

    steps:
    - name: Install dependencies
      run: |
        apt-get update -qq
        apt install -y g++-9 build-essential python3 unzip google-perftools ccache
        update-alternatives --install /usr/bin/python python /usr/bin/python3 1

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    # See https://github.com/actions/upload-artifact/issues/38
    - name: Extract
      run: |
        tar -xf binaries.tar

    - name: 'Download artifact'
      uses: actions/github-script@v3.1.0
      with:
        script: |
          var TESTNAME = process.env.TEST_CASE.substring(6) + ".sv"
          console.log("==> TESTNAME:", TESTNAME)
          console.log("==> OWNER:", process.env.OWNER)
          console.log("==> REPO:", process.env.REPO)
          console.log("==> WORKFLOW:", process.env.WORKFLOW)
          console.log("==> BRANCH:", process.env.BRANCH)
          console.log("==> STATUS:", process.env.STATUS)
          var runID
          const endpoint = "GET /repos/:owner/:repo/actions/workflows/:id/runs?status=:status"
          const params = {
            owner: process.env.OWNER,
            repo: process.env.REPO,
            id: process.env.WORKFLOW,
            branch: process.env.BRANCH,
            status: process.env.STATUS,
          }
          for await (const runs of github.paginate.iterator(endpoint, params)) {
            const run = runs.data.find(r => {
              return true
            })

            if (run) {
              runID = run.id
              break
            }
          }

          console.log("==> RunID:", runID)
          var artifacts = await github.actions.listWorkflowRunArtifacts({
            owner: process.env.OWNER,
            repo: process.env.REPO,
            run_id: runID,
            per_page: 100,
          });
          var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
            return !artifact.name.localeCompare(TESTNAME)
          })[0];
          // TODO: make it more robust, for now, it only handles at most 200 artifacts
          if (matchArtifact == undefined) {
            artifacts = await github.actions.listWorkflowRunArtifacts({
              owner: process.env.OWNER,
              repo: process.env.REPO,
              run_id: runID,
              per_page: 100,
              page: 2,
            });
            matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return !artifact.name.localeCompare(TESTNAME)
            })[0];
          }
          var download = await github.actions.downloadArtifact({
            owner: process.env.OWNER,
            repo: process.env.REPO,
            artifact_id: matchArtifact.id,
            archive_format: 'zip',
          });
          var fs = require('fs');
          fs.writeFileSync("artifact.zip", Buffer.from(download.data));
      env:
        TEST_CASE: ${{ matrix.TEST_CASE_VCDDIFF }}
        OWNER: antmicro
        REPO: yosys-uhdm-plugin-integration
        WORKFLOW: main.yml
        BRANCH: master
        STATUS: success

    - run: |
        unzip artifact.zip -d uhdm-integration/build

    - name: Generate vcd dump (Yosys)
      run: |
        ./uhdm-integration/.github/ci.sh
      env:
        TEST_CASE: ${{ matrix.TEST_CASE_VCDDIFF }}
        TARGET: uhdm/yosys/verilate-ast

    - name: Generate vcd dump (verilator)
      run: ./uhdm-integration/.github/ci.sh
      env:
        TEST_CASE: ${{ matrix.TEST_CASE_VCDDIFF }}
        TARGET: uhdm/verilator/test-ast

    - name: Compare vcd dumps (vcddiff)
      run: ./uhdm-integration/.github/ci.sh
      env:
        TEST_CASE: ${{ matrix.TEST_CASE_VCDDIFF }}
        TARGET: uhdm/vcddiff

